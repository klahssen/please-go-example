// Code generated by protoc-gen-go.
// source: settings_master_quest.proto
// DO NOT EDIT!

package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type DailyQuestSettings struct {
	BucketsPerDay         int32   `protobuf:"varint,1,opt,name=buckets_per_day,json=bucketsPerDay" json:"buckets_per_day,omitempty"`
	StreakLength          int32   `protobuf:"varint,2,opt,name=streak_length,json=streakLength" json:"streak_length,omitempty"`
	BonusMultiplier       float32 `protobuf:"fixed32,3,opt,name=bonus_multiplier,json=bonusMultiplier" json:"bonus_multiplier,omitempty"`
	StreakBonusMultiplier float32 `protobuf:"fixed32,4,opt,name=streak_bonus_multiplier,json=streakBonusMultiplier" json:"streak_bonus_multiplier,omitempty"`
}

func (m *DailyQuestSettings) Reset()                    { *m = DailyQuestSettings{} }
func (m *DailyQuestSettings) String() string            { return proto.CompactTextString(m) }
func (*DailyQuestSettings) ProtoMessage()               {}
func (*DailyQuestSettings) Descriptor() ([]byte, []int) { return fileDescriptor28, []int{0} }

func (m *DailyQuestSettings) GetBucketsPerDay() int32 {
	if m != nil {
		return m.BucketsPerDay
	}
	return 0
}

func (m *DailyQuestSettings) GetStreakLength() int32 {
	if m != nil {
		return m.StreakLength
	}
	return 0
}

func (m *DailyQuestSettings) GetBonusMultiplier() float32 {
	if m != nil {
		return m.BonusMultiplier
	}
	return 0
}

func (m *DailyQuestSettings) GetStreakBonusMultiplier() float32 {
	if m != nil {
		return m.StreakBonusMultiplier
	}
	return 0
}

func init() {
	proto.RegisterType((*DailyQuestSettings)(nil), "SUNProtos.Settings.Master.Quest.DailyQuestSettings")
}

func init() { proto.RegisterFile("settings_master_quest.proto", fileDescriptor28) }

var fileDescriptor28 = []byte{
	// 210 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2e, 0x4e, 0x2d, 0x29,
	0xc9, 0xcc, 0x4b, 0x2f, 0x8e, 0xcf, 0x4d, 0x2c, 0x2e, 0x49, 0x2d, 0x8a, 0x2f, 0x2c, 0x4d, 0x2d,
	0x2e, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x92, 0x0f, 0x0e, 0xf5, 0x0b, 0x00, 0xb1, 0x8a,
	0xf5, 0x82, 0xa1, 0xca, 0xf4, 0x7c, 0xc1, 0xca, 0xf4, 0x02, 0x41, 0xca, 0x94, 0x8e, 0x30, 0x72,
	0x09, 0xb9, 0x24, 0x66, 0xe6, 0x54, 0x82, 0xb9, 0x30, 0x35, 0x42, 0x6a, 0x5c, 0xfc, 0x49, 0xa5,
	0xc9, 0xd9, 0xa9, 0x25, 0xc5, 0xf1, 0x05, 0xa9, 0x45, 0xf1, 0x29, 0x89, 0x95, 0x12, 0x8c, 0x0a,
	0x8c, 0x1a, 0xac, 0x41, 0xbc, 0x50, 0xe1, 0x80, 0xd4, 0x22, 0x97, 0xc4, 0x4a, 0x21, 0x65, 0x2e,
	0xde, 0xe2, 0x92, 0xa2, 0xd4, 0xc4, 0xec, 0xf8, 0x9c, 0xd4, 0xbc, 0xf4, 0x92, 0x0c, 0x09, 0x26,
	0xb0, 0x2a, 0x1e, 0x88, 0xa0, 0x0f, 0x58, 0x4c, 0x48, 0x93, 0x4b, 0x20, 0x29, 0x3f, 0xaf, 0xb4,
	0x38, 0x3e, 0xb7, 0x34, 0xa7, 0x24, 0xb3, 0x20, 0x27, 0x33, 0xb5, 0x48, 0x82, 0x59, 0x81, 0x51,
	0x83, 0x29, 0x88, 0x1f, 0x2c, 0xee, 0x0b, 0x17, 0x16, 0x32, 0xe3, 0x12, 0x87, 0x9a, 0x87, 0xa1,
	0x83, 0x05, 0xac, 0x43, 0x14, 0x22, 0xed, 0x84, 0xaa, 0xcf, 0x89, 0x23, 0x8a, 0x0d, 0xec, 0xe1,
	0xe2, 0x24, 0x08, 0x6d, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x05, 0x88, 0xe5, 0x4d, 0x17, 0x01,
	0x00, 0x00,
}
