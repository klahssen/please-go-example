// Code generated by protoc-gen-go.
// source: settings_master.proto
// DO NOT EDIT!

package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Ignoring public import of ContactSettings from data_player.proto

// Ignoring public import of Currency from data_player.proto

// Ignoring public import of DailyBonus from data_player.proto

// Ignoring public import of EquippedBadge from data_player.proto

// Ignoring public import of PlayerAvatar from data_player.proto

// Ignoring public import of PlayerCamera from data_player.proto

// Ignoring public import of PlayerCurrency from data_player.proto

// Ignoring public import of PlayerPublicProfile from data_player.proto

// Ignoring public import of PlayerStats from data_player.proto

// Ignoring public import of PlayerAvatarType from data_player.proto

// Ignoring public import of ActivityType from enums.proto

// Ignoring public import of BadgeType from enums.proto

// Ignoring public import of CameraInterpolation from enums.proto

// Ignoring public import of CameraTarget from enums.proto

// Ignoring public import of Costume from enums.proto

// Ignoring public import of EncounterType from enums.proto

// Ignoring public import of Filter from enums.proto

// Ignoring public import of Form from enums.proto

// Ignoring public import of Gender from enums.proto

// Ignoring public import of HoloIapItemCategory from enums.proto

// Ignoring public import of ItemCategory from enums.proto

// Ignoring public import of ItemEffect from enums.proto

// Ignoring public import of NotificationState from enums.proto

// Ignoring public import of Platform from enums.proto

// Ignoring public import of PokemonFamilyId from enums.proto

// Ignoring public import of PokemonId from enums.proto

// Ignoring public import of PokemonMove from enums.proto

// Ignoring public import of PokemonMovementType from enums.proto

// Ignoring public import of PokemonRarity from enums.proto

// Ignoring public import of PokemonType from enums.proto

// Ignoring public import of QuestType from enums.proto

// Ignoring public import of Slot from enums.proto

// Ignoring public import of TeamColor from enums.proto

// Ignoring public import of TutorialState from enums.proto

// Ignoring public import of BadgeCaptureReward from data_badge.proto

// Ignoring public import of CameraAttributes from settings_master_pokemon.proto

// Ignoring public import of EncounterAttributes from settings_master_pokemon.proto

// Ignoring public import of EvolutionBranch from settings_master_pokemon.proto

// Ignoring public import of PokemonGenderSettings from settings_master_pokemon.proto

// Ignoring public import of StatsAttributes from settings_master_pokemon.proto

// Ignoring public import of ItemAward from inventory_item.proto

// Ignoring public import of ItemData from inventory_item.proto

// Ignoring public import of ItemId from inventory_item.proto

// Ignoring public import of ItemType from inventory_item.proto

// Ignoring public import of BattleAttributes from settings_master_item.proto

// Ignoring public import of EggIncubatorAttributes from settings_master_item.proto

// Ignoring public import of ExperienceBoostAttributes from settings_master_item.proto

// Ignoring public import of FoodAttributes from settings_master_item.proto

// Ignoring public import of FortModifierAttributes from settings_master_item.proto

// Ignoring public import of IncenseAttributes from settings_master_item.proto

// Ignoring public import of InventoryUpgradeAttributes from settings_master_item.proto

// Ignoring public import of PokeballAttributes from settings_master_item.proto

// Ignoring public import of PotionAttributes from settings_master_item.proto

// Ignoring public import of ReviveAttributes from settings_master_item.proto

// Ignoring public import of DailyQuestSettings from settings_master_quest.proto

type AvatarCustomizationSettings_AvatarCustomizationPromoType int32

const (
	AvatarCustomizationSettings_UNSET_PROMO_TYPE AvatarCustomizationSettings_AvatarCustomizationPromoType = 0
	AvatarCustomizationSettings_SALE             AvatarCustomizationSettings_AvatarCustomizationPromoType = 1
	AvatarCustomizationSettings_FEATURED         AvatarCustomizationSettings_AvatarCustomizationPromoType = 2
)

var AvatarCustomizationSettings_AvatarCustomizationPromoType_name = map[int32]string{
	0: "UNSET_PROMO_TYPE",
	1: "SALE",
	2: "FEATURED",
}
var AvatarCustomizationSettings_AvatarCustomizationPromoType_value = map[string]int32{
	"UNSET_PROMO_TYPE": 0,
	"SALE":             1,
	"FEATURED":         2,
}

func (x AvatarCustomizationSettings_AvatarCustomizationPromoType) String() string {
	return proto.EnumName(AvatarCustomizationSettings_AvatarCustomizationPromoType_name, int32(x))
}
func (AvatarCustomizationSettings_AvatarCustomizationPromoType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor25, []int{0, 0}
}

type AvatarCustomizationSettings_AvatarCustomizationUnlockType int32

const (
	AvatarCustomizationSettings_UNSET_UNLOCK_TYPE AvatarCustomizationSettings_AvatarCustomizationUnlockType = 0
	AvatarCustomizationSettings_DEFAULT           AvatarCustomizationSettings_AvatarCustomizationUnlockType = 1
	AvatarCustomizationSettings_MEDAL_REWARD      AvatarCustomizationSettings_AvatarCustomizationUnlockType = 2
	AvatarCustomizationSettings_IAP_CLOTHING      AvatarCustomizationSettings_AvatarCustomizationUnlockType = 3
	AvatarCustomizationSettings_LEVEL_REWARD      AvatarCustomizationSettings_AvatarCustomizationUnlockType = 4
)

var AvatarCustomizationSettings_AvatarCustomizationUnlockType_name = map[int32]string{
	0: "UNSET_UNLOCK_TYPE",
	1: "DEFAULT",
	2: "MEDAL_REWARD",
	3: "IAP_CLOTHING",
	4: "LEVEL_REWARD",
}
var AvatarCustomizationSettings_AvatarCustomizationUnlockType_value = map[string]int32{
	"UNSET_UNLOCK_TYPE": 0,
	"DEFAULT":           1,
	"MEDAL_REWARD":      2,
	"IAP_CLOTHING":      3,
	"LEVEL_REWARD":      4,
}

func (x AvatarCustomizationSettings_AvatarCustomizationUnlockType) String() string {
	return proto.EnumName(AvatarCustomizationSettings_AvatarCustomizationUnlockType_name, int32(x))
}
func (AvatarCustomizationSettings_AvatarCustomizationUnlockType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor25, []int{0, 1}
}

type PokemonSettings_BuddySize int32

const (
	PokemonSettings_BUDDY_MEDIUM   PokemonSettings_BuddySize = 0
	PokemonSettings_BUDDY_SHOULDER PokemonSettings_BuddySize = 1
	PokemonSettings_BUDDY_BIG      PokemonSettings_BuddySize = 2
	PokemonSettings_BUDDY_FLYING   PokemonSettings_BuddySize = 3
	PokemonSettings_BUDDY_BABY     PokemonSettings_BuddySize = 4
)

var PokemonSettings_BuddySize_name = map[int32]string{
	0: "BUDDY_MEDIUM",
	1: "BUDDY_SHOULDER",
	2: "BUDDY_BIG",
	3: "BUDDY_FLYING",
	4: "BUDDY_BABY",
}
var PokemonSettings_BuddySize_value = map[string]int32{
	"BUDDY_MEDIUM":   0,
	"BUDDY_SHOULDER": 1,
	"BUDDY_BIG":      2,
	"BUDDY_FLYING":   3,
	"BUDDY_BABY":     4,
}

func (x PokemonSettings_BuddySize) String() string {
	return proto.EnumName(PokemonSettings_BuddySize_name, int32(x))
}
func (PokemonSettings_BuddySize) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor25, []int{15, 0}
}

type AvatarCustomizationSettings struct {
	Enabled           bool                                                       `protobuf:"varint,1,opt,name=enabled" json:"enabled,omitempty"`
	AvatarType        PlayerAvatarType                                           `protobuf:"varint,2,opt,name=avatar_type,json=avatarType,enum=SUNProtos.Data.Player.PlayerAvatarType" json:"avatar_type,omitempty"`
	Slot              []Slot                                                     `protobuf:"varint,3,rep,packed,name=slot,enum=SUNProtos.Enums.Slot" json:"slot,omitempty"`
	BundleName        string                                                     `protobuf:"bytes,4,opt,name=bundle_name,json=bundleName" json:"bundle_name,omitempty"`
	AssetName         string                                                     `protobuf:"bytes,5,opt,name=asset_name,json=assetName" json:"asset_name,omitempty"`
	GroupName         string                                                     `protobuf:"bytes,6,opt,name=group_name,json=groupName" json:"group_name,omitempty"`
	SortOrder         int32                                                      `protobuf:"varint,7,opt,name=sort_order,json=sortOrder" json:"sort_order,omitempty"`
	UnlockType        AvatarCustomizationSettings_AvatarCustomizationUnlockType  `protobuf:"varint,8,opt,name=unlock_type,json=unlockType,enum=SUNProtos.Settings.Master.AvatarCustomizationSettings_AvatarCustomizationUnlockType" json:"unlock_type,omitempty"`
	PromoType         []AvatarCustomizationSettings_AvatarCustomizationPromoType `protobuf:"varint,9,rep,packed,name=promo_type,json=promoType,enum=SUNProtos.Settings.Master.AvatarCustomizationSettings_AvatarCustomizationPromoType" json:"promo_type,omitempty"`
	UnlockBadgeType   BadgeType                                                  `protobuf:"varint,10,opt,name=unlock_badge_type,json=unlockBadgeType,enum=SUNProtos.Enums.BadgeType" json:"unlock_badge_type,omitempty"`
	IapSku            string                                                     `protobuf:"bytes,11,opt,name=iap_sku,json=iapSku" json:"iap_sku,omitempty"`
	UnlockBadgeLevel  int32                                                      `protobuf:"varint,12,opt,name=unlock_badge_level,json=unlockBadgeLevel" json:"unlock_badge_level,omitempty"`
	IconName          string                                                     `protobuf:"bytes,13,opt,name=icon_name,json=iconName" json:"icon_name,omitempty"`
	UnlockPlayerLevel int32                                                      `protobuf:"varint,14,opt,name=unlock_player_level,json=unlockPlayerLevel" json:"unlock_player_level,omitempty"`
}

func (m *AvatarCustomizationSettings) Reset()                    { *m = AvatarCustomizationSettings{} }
func (m *AvatarCustomizationSettings) String() string            { return proto.CompactTextString(m) }
func (*AvatarCustomizationSettings) ProtoMessage()               {}
func (*AvatarCustomizationSettings) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{0} }

func (m *AvatarCustomizationSettings) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *AvatarCustomizationSettings) GetAvatarType() PlayerAvatarType {
	if m != nil {
		return m.AvatarType
	}
	return PlayerAvatarType_PLAYER_AVATAR_MALE
}

func (m *AvatarCustomizationSettings) GetSlot() []Slot {
	if m != nil {
		return m.Slot
	}
	return nil
}

func (m *AvatarCustomizationSettings) GetBundleName() string {
	if m != nil {
		return m.BundleName
	}
	return ""
}

func (m *AvatarCustomizationSettings) GetAssetName() string {
	if m != nil {
		return m.AssetName
	}
	return ""
}

func (m *AvatarCustomizationSettings) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

func (m *AvatarCustomizationSettings) GetSortOrder() int32 {
	if m != nil {
		return m.SortOrder
	}
	return 0
}

func (m *AvatarCustomizationSettings) GetUnlockType() AvatarCustomizationSettings_AvatarCustomizationUnlockType {
	if m != nil {
		return m.UnlockType
	}
	return AvatarCustomizationSettings_UNSET_UNLOCK_TYPE
}

func (m *AvatarCustomizationSettings) GetPromoType() []AvatarCustomizationSettings_AvatarCustomizationPromoType {
	if m != nil {
		return m.PromoType
	}
	return nil
}

func (m *AvatarCustomizationSettings) GetUnlockBadgeType() BadgeType {
	if m != nil {
		return m.UnlockBadgeType
	}
	return BadgeType_BADGE_UNSET
}

func (m *AvatarCustomizationSettings) GetIapSku() string {
	if m != nil {
		return m.IapSku
	}
	return ""
}

func (m *AvatarCustomizationSettings) GetUnlockBadgeLevel() int32 {
	if m != nil {
		return m.UnlockBadgeLevel
	}
	return 0
}

func (m *AvatarCustomizationSettings) GetIconName() string {
	if m != nil {
		return m.IconName
	}
	return ""
}

func (m *AvatarCustomizationSettings) GetUnlockPlayerLevel() int32 {
	if m != nil {
		return m.UnlockPlayerLevel
	}
	return 0
}

type BadgeSettings struct {
	BadgeType     BadgeType             `protobuf:"varint,1,opt,name=badge_type,json=badgeType,enum=SUNProtos.Enums.BadgeType" json:"badge_type,omitempty"`
	BadgeRank     int32                 `protobuf:"varint,2,opt,name=badge_rank,json=badgeRank" json:"badge_rank,omitempty"`
	Targets       []int32               `protobuf:"varint,3,rep,packed,name=targets" json:"targets,omitempty"`
	CaptureReward []*BadgeCaptureReward `protobuf:"bytes,4,rep,name=capture_reward,json=captureReward" json:"capture_reward,omitempty"`
}

func (m *BadgeSettings) Reset()                    { *m = BadgeSettings{} }
func (m *BadgeSettings) String() string            { return proto.CompactTextString(m) }
func (*BadgeSettings) ProtoMessage()               {}
func (*BadgeSettings) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{1} }

func (m *BadgeSettings) GetBadgeType() BadgeType {
	if m != nil {
		return m.BadgeType
	}
	return BadgeType_BADGE_UNSET
}

func (m *BadgeSettings) GetBadgeRank() int32 {
	if m != nil {
		return m.BadgeRank
	}
	return 0
}

func (m *BadgeSettings) GetTargets() []int32 {
	if m != nil {
		return m.Targets
	}
	return nil
}

func (m *BadgeSettings) GetCaptureReward() []*BadgeCaptureReward {
	if m != nil {
		return m.CaptureReward
	}
	return nil
}

type CameraSettings struct {
	NextCamera        string                `protobuf:"bytes,1,opt,name=next_camera,json=nextCamera" json:"next_camera,omitempty"`
	Interpolation     []CameraInterpolation `protobuf:"varint,2,rep,packed,name=interpolation,enum=SUNProtos.Enums.CameraInterpolation" json:"interpolation,omitempty"`
	TargetType        []CameraTarget        `protobuf:"varint,3,rep,packed,name=target_type,json=targetType,enum=SUNProtos.Enums.CameraTarget" json:"target_type,omitempty"`
	EaseInSpeed       []float32             `protobuf:"fixed32,4,rep,packed,name=ease_in_speed,json=easeInSpeed" json:"ease_in_speed,omitempty"`
	EastOutSpeed      []float32             `protobuf:"fixed32,5,rep,packed,name=east_out_speed,json=eastOutSpeed" json:"east_out_speed,omitempty"`
	DurationSeconds   []float32             `protobuf:"fixed32,6,rep,packed,name=duration_seconds,json=durationSeconds" json:"duration_seconds,omitempty"`
	WaitSeconds       []float32             `protobuf:"fixed32,7,rep,packed,name=wait_seconds,json=waitSeconds" json:"wait_seconds,omitempty"`
	TransitionSeconds []float32             `protobuf:"fixed32,8,rep,packed,name=transition_seconds,json=transitionSeconds" json:"transition_seconds,omitempty"`
	AngleDegree       []float32             `protobuf:"fixed32,9,rep,packed,name=angle_degree,json=angleDegree" json:"angle_degree,omitempty"`
	AngleOffsetDegree []float32             `protobuf:"fixed32,10,rep,packed,name=angle_offset_degree,json=angleOffsetDegree" json:"angle_offset_degree,omitempty"`
	PitchDegree       []float32             `protobuf:"fixed32,11,rep,packed,name=pitch_degree,json=pitchDegree" json:"pitch_degree,omitempty"`
	PitchOffsetDegree []float32             `protobuf:"fixed32,12,rep,packed,name=pitch_offset_degree,json=pitchOffsetDegree" json:"pitch_offset_degree,omitempty"`
	RollDegree        []float32             `protobuf:"fixed32,13,rep,packed,name=roll_degree,json=rollDegree" json:"roll_degree,omitempty"`
	DistanceMeters    []float32             `protobuf:"fixed32,14,rep,packed,name=distance_meters,json=distanceMeters" json:"distance_meters,omitempty"`
	HeightPercent     []float32             `protobuf:"fixed32,15,rep,packed,name=height_percent,json=heightPercent" json:"height_percent,omitempty"`
	VertCtrRatio      []float32             `protobuf:"fixed32,16,rep,packed,name=vert_ctr_ratio,json=vertCtrRatio" json:"vert_ctr_ratio,omitempty"`
}

func (m *CameraSettings) Reset()                    { *m = CameraSettings{} }
func (m *CameraSettings) String() string            { return proto.CompactTextString(m) }
func (*CameraSettings) ProtoMessage()               {}
func (*CameraSettings) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{2} }

func (m *CameraSettings) GetNextCamera() string {
	if m != nil {
		return m.NextCamera
	}
	return ""
}

func (m *CameraSettings) GetInterpolation() []CameraInterpolation {
	if m != nil {
		return m.Interpolation
	}
	return nil
}

func (m *CameraSettings) GetTargetType() []CameraTarget {
	if m != nil {
		return m.TargetType
	}
	return nil
}

func (m *CameraSettings) GetEaseInSpeed() []float32 {
	if m != nil {
		return m.EaseInSpeed
	}
	return nil
}

func (m *CameraSettings) GetEastOutSpeed() []float32 {
	if m != nil {
		return m.EastOutSpeed
	}
	return nil
}

func (m *CameraSettings) GetDurationSeconds() []float32 {
	if m != nil {
		return m.DurationSeconds
	}
	return nil
}

func (m *CameraSettings) GetWaitSeconds() []float32 {
	if m != nil {
		return m.WaitSeconds
	}
	return nil
}

func (m *CameraSettings) GetTransitionSeconds() []float32 {
	if m != nil {
		return m.TransitionSeconds
	}
	return nil
}

func (m *CameraSettings) GetAngleDegree() []float32 {
	if m != nil {
		return m.AngleDegree
	}
	return nil
}

func (m *CameraSettings) GetAngleOffsetDegree() []float32 {
	if m != nil {
		return m.AngleOffsetDegree
	}
	return nil
}

func (m *CameraSettings) GetPitchDegree() []float32 {
	if m != nil {
		return m.PitchDegree
	}
	return nil
}

func (m *CameraSettings) GetPitchOffsetDegree() []float32 {
	if m != nil {
		return m.PitchOffsetDegree
	}
	return nil
}

func (m *CameraSettings) GetRollDegree() []float32 {
	if m != nil {
		return m.RollDegree
	}
	return nil
}

func (m *CameraSettings) GetDistanceMeters() []float32 {
	if m != nil {
		return m.DistanceMeters
	}
	return nil
}

func (m *CameraSettings) GetHeightPercent() []float32 {
	if m != nil {
		return m.HeightPercent
	}
	return nil
}

func (m *CameraSettings) GetVertCtrRatio() []float32 {
	if m != nil {
		return m.VertCtrRatio
	}
	return nil
}

type EncounterSettings struct {
	SpinBonusThreshold      float32 `protobuf:"fixed32,1,opt,name=spin_bonus_threshold,json=spinBonusThreshold" json:"spin_bonus_threshold,omitempty"`
	ExcellentThrowThreshold float32 `protobuf:"fixed32,2,opt,name=excellent_throw_threshold,json=excellentThrowThreshold" json:"excellent_throw_threshold,omitempty"`
	GreatThrowThreshold     float32 `protobuf:"fixed32,3,opt,name=great_throw_threshold,json=greatThrowThreshold" json:"great_throw_threshold,omitempty"`
	NiceThrowThreshold      float32 `protobuf:"fixed32,4,opt,name=nice_throw_threshold,json=niceThrowThreshold" json:"nice_throw_threshold,omitempty"`
	MilestoneThreshold      int32   `protobuf:"varint,5,opt,name=milestone_threshold,json=milestoneThreshold" json:"milestone_threshold,omitempty"`
}

func (m *EncounterSettings) Reset()                    { *m = EncounterSettings{} }
func (m *EncounterSettings) String() string            { return proto.CompactTextString(m) }
func (*EncounterSettings) ProtoMessage()               {}
func (*EncounterSettings) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{3} }

func (m *EncounterSettings) GetSpinBonusThreshold() float32 {
	if m != nil {
		return m.SpinBonusThreshold
	}
	return 0
}

func (m *EncounterSettings) GetExcellentThrowThreshold() float32 {
	if m != nil {
		return m.ExcellentThrowThreshold
	}
	return 0
}

func (m *EncounterSettings) GetGreatThrowThreshold() float32 {
	if m != nil {
		return m.GreatThrowThreshold
	}
	return 0
}

func (m *EncounterSettings) GetNiceThrowThreshold() float32 {
	if m != nil {
		return m.NiceThrowThreshold
	}
	return 0
}

func (m *EncounterSettings) GetMilestoneThreshold() int32 {
	if m != nil {
		return m.MilestoneThreshold
	}
	return 0
}

type EquippedBadgeSettings struct {
	EquipBadgeCooldownMs  int64     `protobuf:"varint,1,opt,name=equip_badge_cooldown_ms,json=equipBadgeCooldownMs" json:"equip_badge_cooldown_ms,omitempty"`
	CatchProbabilityBonus []float32 `protobuf:"fixed32,2,rep,packed,name=catch_probability_bonus,json=catchProbabilityBonus" json:"catch_probability_bonus,omitempty"`
	FleeProbabilityBonus  []float32 `protobuf:"fixed32,3,rep,packed,name=flee_probability_bonus,json=fleeProbabilityBonus" json:"flee_probability_bonus,omitempty"`
}

func (m *EquippedBadgeSettings) Reset()                    { *m = EquippedBadgeSettings{} }
func (m *EquippedBadgeSettings) String() string            { return proto.CompactTextString(m) }
func (*EquippedBadgeSettings) ProtoMessage()               {}
func (*EquippedBadgeSettings) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{4} }

func (m *EquippedBadgeSettings) GetEquipBadgeCooldownMs() int64 {
	if m != nil {
		return m.EquipBadgeCooldownMs
	}
	return 0
}

func (m *EquippedBadgeSettings) GetCatchProbabilityBonus() []float32 {
	if m != nil {
		return m.CatchProbabilityBonus
	}
	return nil
}

func (m *EquippedBadgeSettings) GetFleeProbabilityBonus() []float32 {
	if m != nil {
		return m.FleeProbabilityBonus
	}
	return nil
}

type FormSettings struct {
	Pokemon PokemonId            `protobuf:"varint,1,opt,name=pokemon,enum=SUNProtos.Enums.PokemonId" json:"pokemon,omitempty"`
	Forms   []*FormSettings_Form `protobuf:"bytes,2,rep,name=forms" json:"forms,omitempty"`
}

func (m *FormSettings) Reset()                    { *m = FormSettings{} }
func (m *FormSettings) String() string            { return proto.CompactTextString(m) }
func (*FormSettings) ProtoMessage()               {}
func (*FormSettings) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{5} }

func (m *FormSettings) GetPokemon() PokemonId {
	if m != nil {
		return m.Pokemon
	}
	return PokemonId_MISSINGNO
}

func (m *FormSettings) GetForms() []*FormSettings_Form {
	if m != nil {
		return m.Forms
	}
	return nil
}

type FormSettings_Form struct {
	Form             Form  `protobuf:"varint,1,opt,name=form,enum=SUNProtos.Enums.Form" json:"form,omitempty"`
	AssetBundleValue int32 `protobuf:"varint,2,opt,name=asset_bundle_value,json=assetBundleValue" json:"asset_bundle_value,omitempty"`
}

func (m *FormSettings_Form) Reset()                    { *m = FormSettings_Form{} }
func (m *FormSettings_Form) String() string            { return proto.CompactTextString(m) }
func (*FormSettings_Form) ProtoMessage()               {}
func (*FormSettings_Form) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{5, 0} }

func (m *FormSettings_Form) GetForm() Form {
	if m != nil {
		return m.Form
	}
	return Form_FORM_UNSET
}

func (m *FormSettings_Form) GetAssetBundleValue() int32 {
	if m != nil {
		return m.AssetBundleValue
	}
	return 0
}

type GenderSettings struct {
	Pokemon PokemonId              `protobuf:"varint,1,opt,name=pokemon,enum=SUNProtos.Enums.PokemonId" json:"pokemon,omitempty"`
	Gender  *PokemonGenderSettings `protobuf:"bytes,2,opt,name=gender" json:"gender,omitempty"`
}

func (m *GenderSettings) Reset()                    { *m = GenderSettings{} }
func (m *GenderSettings) String() string            { return proto.CompactTextString(m) }
func (*GenderSettings) ProtoMessage()               {}
func (*GenderSettings) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{6} }

func (m *GenderSettings) GetPokemon() PokemonId {
	if m != nil {
		return m.Pokemon
	}
	return PokemonId_MISSINGNO
}

func (m *GenderSettings) GetGender() *PokemonGenderSettings {
	if m != nil {
		return m.Gender
	}
	return nil
}

type GymBattleSettings struct {
	EnergyPerSec                  float32 `protobuf:"fixed32,1,opt,name=energy_per_sec,json=energyPerSec" json:"energy_per_sec,omitempty"`
	DodgeEnergyCost               float32 `protobuf:"fixed32,2,opt,name=dodge_energy_cost,json=dodgeEnergyCost" json:"dodge_energy_cost,omitempty"`
	RetargetSeconds               float32 `protobuf:"fixed32,3,opt,name=retarget_seconds,json=retargetSeconds" json:"retarget_seconds,omitempty"`
	EnemyAttackInterval           float32 `protobuf:"fixed32,4,opt,name=enemy_attack_interval,json=enemyAttackInterval" json:"enemy_attack_interval,omitempty"`
	AttackServerInterval          float32 `protobuf:"fixed32,5,opt,name=attack_server_interval,json=attackServerInterval" json:"attack_server_interval,omitempty"`
	RoundDurationSeconds          float32 `protobuf:"fixed32,6,opt,name=round_duration_seconds,json=roundDurationSeconds" json:"round_duration_seconds,omitempty"`
	BonusTimePerAllySeconds       float32 `protobuf:"fixed32,7,opt,name=bonus_time_per_ally_seconds,json=bonusTimePerAllySeconds" json:"bonus_time_per_ally_seconds,omitempty"`
	MaximumAttackersPerBattle     int32   `protobuf:"varint,8,opt,name=maximum_attackers_per_battle,json=maximumAttackersPerBattle" json:"maximum_attackers_per_battle,omitempty"`
	SameTypeAttackBonusMultiplier float32 `protobuf:"fixed32,9,opt,name=same_type_attack_bonus_multiplier,json=sameTypeAttackBonusMultiplier" json:"same_type_attack_bonus_multiplier,omitempty"`
	MaximumEnergy                 int32   `protobuf:"varint,10,opt,name=maximum_energy,json=maximumEnergy" json:"maximum_energy,omitempty"`
	EnergyDeltaPerHealthLost      float32 `protobuf:"fixed32,11,opt,name=energy_delta_per_health_lost,json=energyDeltaPerHealthLost" json:"energy_delta_per_health_lost,omitempty"`
	DodgeDurationMs               int32   `protobuf:"varint,12,opt,name=dodge_duration_ms,json=dodgeDurationMs" json:"dodge_duration_ms,omitempty"`
	MinimumPlayerLevel            int32   `protobuf:"varint,13,opt,name=minimum_player_level,json=minimumPlayerLevel" json:"minimum_player_level,omitempty"`
	SwapDurationMs                int32   `protobuf:"varint,14,opt,name=swap_duration_ms,json=swapDurationMs" json:"swap_duration_ms,omitempty"`
	DodgeDamageReductionPercent   float32 `protobuf:"fixed32,15,opt,name=dodge_damage_reduction_percent,json=dodgeDamageReductionPercent" json:"dodge_damage_reduction_percent,omitempty"`
}

func (m *GymBattleSettings) Reset()                    { *m = GymBattleSettings{} }
func (m *GymBattleSettings) String() string            { return proto.CompactTextString(m) }
func (*GymBattleSettings) ProtoMessage()               {}
func (*GymBattleSettings) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{7} }

func (m *GymBattleSettings) GetEnergyPerSec() float32 {
	if m != nil {
		return m.EnergyPerSec
	}
	return 0
}

func (m *GymBattleSettings) GetDodgeEnergyCost() float32 {
	if m != nil {
		return m.DodgeEnergyCost
	}
	return 0
}

func (m *GymBattleSettings) GetRetargetSeconds() float32 {
	if m != nil {
		return m.RetargetSeconds
	}
	return 0
}

func (m *GymBattleSettings) GetEnemyAttackInterval() float32 {
	if m != nil {
		return m.EnemyAttackInterval
	}
	return 0
}

func (m *GymBattleSettings) GetAttackServerInterval() float32 {
	if m != nil {
		return m.AttackServerInterval
	}
	return 0
}

func (m *GymBattleSettings) GetRoundDurationSeconds() float32 {
	if m != nil {
		return m.RoundDurationSeconds
	}
	return 0
}

func (m *GymBattleSettings) GetBonusTimePerAllySeconds() float32 {
	if m != nil {
		return m.BonusTimePerAllySeconds
	}
	return 0
}

func (m *GymBattleSettings) GetMaximumAttackersPerBattle() int32 {
	if m != nil {
		return m.MaximumAttackersPerBattle
	}
	return 0
}

func (m *GymBattleSettings) GetSameTypeAttackBonusMultiplier() float32 {
	if m != nil {
		return m.SameTypeAttackBonusMultiplier
	}
	return 0
}

func (m *GymBattleSettings) GetMaximumEnergy() int32 {
	if m != nil {
		return m.MaximumEnergy
	}
	return 0
}

func (m *GymBattleSettings) GetEnergyDeltaPerHealthLost() float32 {
	if m != nil {
		return m.EnergyDeltaPerHealthLost
	}
	return 0
}

func (m *GymBattleSettings) GetDodgeDurationMs() int32 {
	if m != nil {
		return m.DodgeDurationMs
	}
	return 0
}

func (m *GymBattleSettings) GetMinimumPlayerLevel() int32 {
	if m != nil {
		return m.MinimumPlayerLevel
	}
	return 0
}

func (m *GymBattleSettings) GetSwapDurationMs() int32 {
	if m != nil {
		return m.SwapDurationMs
	}
	return 0
}

func (m *GymBattleSettings) GetDodgeDamageReductionPercent() float32 {
	if m != nil {
		return m.DodgeDamageReductionPercent
	}
	return 0
}

type GymLevelSettings struct {
	RequiredExperience []int32 `protobuf:"varint,1,rep,packed,name=required_experience,json=requiredExperience" json:"required_experience,omitempty"`
	LeaderSlots        []int32 `protobuf:"varint,2,rep,packed,name=leader_slots,json=leaderSlots" json:"leader_slots,omitempty"`
	TrainerSlots       []int32 `protobuf:"varint,3,rep,packed,name=trainer_slots,json=trainerSlots" json:"trainer_slots,omitempty"`
	SearchRollBonus    []int32 `protobuf:"varint,4,rep,packed,name=search_roll_bonus,json=searchRollBonus" json:"search_roll_bonus,omitempty"`
}

func (m *GymLevelSettings) Reset()                    { *m = GymLevelSettings{} }
func (m *GymLevelSettings) String() string            { return proto.CompactTextString(m) }
func (*GymLevelSettings) ProtoMessage()               {}
func (*GymLevelSettings) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{8} }

func (m *GymLevelSettings) GetRequiredExperience() []int32 {
	if m != nil {
		return m.RequiredExperience
	}
	return nil
}

func (m *GymLevelSettings) GetLeaderSlots() []int32 {
	if m != nil {
		return m.LeaderSlots
	}
	return nil
}

func (m *GymLevelSettings) GetTrainerSlots() []int32 {
	if m != nil {
		return m.TrainerSlots
	}
	return nil
}

func (m *GymLevelSettings) GetSearchRollBonus() []int32 {
	if m != nil {
		return m.SearchRollBonus
	}
	return nil
}

type IapItemDisplay struct {
	Sku       string              `protobuf:"bytes,1,opt,name=sku" json:"sku,omitempty"`
	Category  HoloIapItemCategory `protobuf:"varint,2,opt,name=category,enum=SUNProtos.Enums.HoloIapItemCategory" json:"category,omitempty"`
	SortOrder int32               `protobuf:"varint,3,opt,name=sort_order,json=sortOrder" json:"sort_order,omitempty"`
	ItemIds   []ItemId            `protobuf:"varint,4,rep,packed,name=item_ids,json=itemIds,enum=SUNProtos.Inventory.Item.ItemId" json:"item_ids,omitempty"`
	Counts    []int32             `protobuf:"varint,5,rep,packed,name=counts" json:"counts,omitempty"`
}

func (m *IapItemDisplay) Reset()                    { *m = IapItemDisplay{} }
func (m *IapItemDisplay) String() string            { return proto.CompactTextString(m) }
func (*IapItemDisplay) ProtoMessage()               {}
func (*IapItemDisplay) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{9} }

func (m *IapItemDisplay) GetSku() string {
	if m != nil {
		return m.Sku
	}
	return ""
}

func (m *IapItemDisplay) GetCategory() HoloIapItemCategory {
	if m != nil {
		return m.Category
	}
	return HoloIapItemCategory_IAP_CATEGORY_NONE
}

func (m *IapItemDisplay) GetSortOrder() int32 {
	if m != nil {
		return m.SortOrder
	}
	return 0
}

func (m *IapItemDisplay) GetItemIds() []ItemId {
	if m != nil {
		return m.ItemIds
	}
	return nil
}

func (m *IapItemDisplay) GetCounts() []int32 {
	if m != nil {
		return m.Counts
	}
	return nil
}

type IapSettings struct {
	DailyBonusCoins                int32    `protobuf:"varint,1,opt,name=daily_bonus_coins,json=dailyBonusCoins" json:"daily_bonus_coins,omitempty"`
	DailyDefenderBonusPerPokemon   []int32  `protobuf:"varint,2,rep,packed,name=daily_defender_bonus_per_pokemon,json=dailyDefenderBonusPerPokemon" json:"daily_defender_bonus_per_pokemon,omitempty"`
	DailyDefenderBonusMaxDefenders int32    `protobuf:"varint,3,opt,name=daily_defender_bonus_max_defenders,json=dailyDefenderBonusMaxDefenders" json:"daily_defender_bonus_max_defenders,omitempty"`
	DailyDefenderBonusCurrency     []string `protobuf:"bytes,4,rep,name=daily_defender_bonus_currency,json=dailyDefenderBonusCurrency" json:"daily_defender_bonus_currency,omitempty"`
	MinTimeBetweenClaimsMs         int64    `protobuf:"varint,5,opt,name=min_time_between_claims_ms,json=minTimeBetweenClaimsMs" json:"min_time_between_claims_ms,omitempty"`
	DailyBonusEnabled              bool     `protobuf:"varint,6,opt,name=daily_bonus_enabled,json=dailyBonusEnabled" json:"daily_bonus_enabled,omitempty"`
	DailyDefenderBonusEnabled      bool     `protobuf:"varint,7,opt,name=daily_defender_bonus_enabled,json=dailyDefenderBonusEnabled" json:"daily_defender_bonus_enabled,omitempty"`
}

func (m *IapSettings) Reset()                    { *m = IapSettings{} }
func (m *IapSettings) String() string            { return proto.CompactTextString(m) }
func (*IapSettings) ProtoMessage()               {}
func (*IapSettings) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{10} }

func (m *IapSettings) GetDailyBonusCoins() int32 {
	if m != nil {
		return m.DailyBonusCoins
	}
	return 0
}

func (m *IapSettings) GetDailyDefenderBonusPerPokemon() []int32 {
	if m != nil {
		return m.DailyDefenderBonusPerPokemon
	}
	return nil
}

func (m *IapSettings) GetDailyDefenderBonusMaxDefenders() int32 {
	if m != nil {
		return m.DailyDefenderBonusMaxDefenders
	}
	return 0
}

func (m *IapSettings) GetDailyDefenderBonusCurrency() []string {
	if m != nil {
		return m.DailyDefenderBonusCurrency
	}
	return nil
}

func (m *IapSettings) GetMinTimeBetweenClaimsMs() int64 {
	if m != nil {
		return m.MinTimeBetweenClaimsMs
	}
	return 0
}

func (m *IapSettings) GetDailyBonusEnabled() bool {
	if m != nil {
		return m.DailyBonusEnabled
	}
	return false
}

func (m *IapSettings) GetDailyDefenderBonusEnabled() bool {
	if m != nil {
		return m.DailyDefenderBonusEnabled
	}
	return false
}

type ItemSettings struct {
	ItemId           ItemId                      `protobuf:"varint,1,opt,name=item_id,json=itemId,enum=SUNProtos.Inventory.Item.ItemId" json:"item_id,omitempty"`
	ItemType         ItemType                    `protobuf:"varint,2,opt,name=item_type,json=itemType,enum=SUNProtos.Inventory.Item.ItemType" json:"item_type,omitempty"`
	Category         ItemCategory                `protobuf:"varint,3,opt,name=category,enum=SUNProtos.Enums.ItemCategory" json:"category,omitempty"`
	DropFreq         float32                     `protobuf:"fixed32,4,opt,name=drop_freq,json=dropFreq" json:"drop_freq,omitempty"`
	DropTrainerLevel int32                       `protobuf:"varint,5,opt,name=drop_trainer_level,json=dropTrainerLevel" json:"drop_trainer_level,omitempty"`
	Pokeball         *PokeballAttributes         `protobuf:"bytes,6,opt,name=pokeball" json:"pokeball,omitempty"`
	Potion           *PotionAttributes           `protobuf:"bytes,7,opt,name=potion" json:"potion,omitempty"`
	Revive           *ReviveAttributes           `protobuf:"bytes,8,opt,name=revive" json:"revive,omitempty"`
	Battle           *BattleAttributes           `protobuf:"bytes,9,opt,name=battle" json:"battle,omitempty"`
	Food             *FoodAttributes             `protobuf:"bytes,10,opt,name=food" json:"food,omitempty"`
	InventoryUpgrade *InventoryUpgradeAttributes `protobuf:"bytes,11,opt,name=inventory_upgrade,json=inventoryUpgrade" json:"inventory_upgrade,omitempty"`
	XpBoost          *ExperienceBoostAttributes  `protobuf:"bytes,12,opt,name=xp_boost,json=xpBoost" json:"xp_boost,omitempty"`
	Incense          *IncenseAttributes          `protobuf:"bytes,13,opt,name=incense" json:"incense,omitempty"`
	EggIncubator     *EggIncubatorAttributes     `protobuf:"bytes,14,opt,name=egg_incubator,json=eggIncubator" json:"egg_incubator,omitempty"`
	FortModifier     *FortModifierAttributes     `protobuf:"bytes,15,opt,name=fort_modifier,json=fortModifier" json:"fort_modifier,omitempty"`
}

func (m *ItemSettings) Reset()                    { *m = ItemSettings{} }
func (m *ItemSettings) String() string            { return proto.CompactTextString(m) }
func (*ItemSettings) ProtoMessage()               {}
func (*ItemSettings) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{11} }

func (m *ItemSettings) GetItemId() ItemId {
	if m != nil {
		return m.ItemId
	}
	return ItemId_ITEM_UNKNOWN
}

func (m *ItemSettings) GetItemType() ItemType {
	if m != nil {
		return m.ItemType
	}
	return ItemType_ITEM_TYPE_NONE
}

func (m *ItemSettings) GetCategory() ItemCategory {
	if m != nil {
		return m.Category
	}
	return ItemCategory_ITEM_CATEGORY_NONE
}

func (m *ItemSettings) GetDropFreq() float32 {
	if m != nil {
		return m.DropFreq
	}
	return 0
}

func (m *ItemSettings) GetDropTrainerLevel() int32 {
	if m != nil {
		return m.DropTrainerLevel
	}
	return 0
}

func (m *ItemSettings) GetPokeball() *PokeballAttributes {
	if m != nil {
		return m.Pokeball
	}
	return nil
}

func (m *ItemSettings) GetPotion() *PotionAttributes {
	if m != nil {
		return m.Potion
	}
	return nil
}

func (m *ItemSettings) GetRevive() *ReviveAttributes {
	if m != nil {
		return m.Revive
	}
	return nil
}

func (m *ItemSettings) GetBattle() *BattleAttributes {
	if m != nil {
		return m.Battle
	}
	return nil
}

func (m *ItemSettings) GetFood() *FoodAttributes {
	if m != nil {
		return m.Food
	}
	return nil
}

func (m *ItemSettings) GetInventoryUpgrade() *InventoryUpgradeAttributes {
	if m != nil {
		return m.InventoryUpgrade
	}
	return nil
}

func (m *ItemSettings) GetXpBoost() *ExperienceBoostAttributes {
	if m != nil {
		return m.XpBoost
	}
	return nil
}

func (m *ItemSettings) GetIncense() *IncenseAttributes {
	if m != nil {
		return m.Incense
	}
	return nil
}

func (m *ItemSettings) GetEggIncubator() *EggIncubatorAttributes {
	if m != nil {
		return m.EggIncubator
	}
	return nil
}

func (m *ItemSettings) GetFortModifier() *FortModifierAttributes {
	if m != nil {
		return m.FortModifier
	}
	return nil
}

type MoveSequenceSettings struct {
	Sequence []string `protobuf:"bytes,1,rep,name=sequence" json:"sequence,omitempty"`
}

func (m *MoveSequenceSettings) Reset()                    { *m = MoveSequenceSettings{} }
func (m *MoveSequenceSettings) String() string            { return proto.CompactTextString(m) }
func (*MoveSequenceSettings) ProtoMessage()               {}
func (*MoveSequenceSettings) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{12} }

func (m *MoveSequenceSettings) GetSequence() []string {
	if m != nil {
		return m.Sequence
	}
	return nil
}

type MoveSettings struct {
	MovementId          PokemonMove `protobuf:"varint,1,opt,name=movement_id,json=movementId,enum=SUNProtos.Enums.PokemonMove" json:"movement_id,omitempty"`
	AnimationId         int32       `protobuf:"varint,2,opt,name=animation_id,json=animationId" json:"animation_id,omitempty"`
	PokemonType         PokemonType `protobuf:"varint,3,opt,name=pokemon_type,json=pokemonType,enum=SUNProtos.Enums.PokemonType" json:"pokemon_type,omitempty"`
	Power               float32     `protobuf:"fixed32,4,opt,name=power" json:"power,omitempty"`
	AccuracyChance      float32     `protobuf:"fixed32,5,opt,name=accuracy_chance,json=accuracyChance" json:"accuracy_chance,omitempty"`
	CriticalChance      float32     `protobuf:"fixed32,6,opt,name=critical_chance,json=criticalChance" json:"critical_chance,omitempty"`
	HealScalar          float32     `protobuf:"fixed32,7,opt,name=heal_scalar,json=healScalar" json:"heal_scalar,omitempty"`
	StaminaLossScalar   float32     `protobuf:"fixed32,8,opt,name=stamina_loss_scalar,json=staminaLossScalar" json:"stamina_loss_scalar,omitempty"`
	TrainerLevelMin     int32       `protobuf:"varint,9,opt,name=trainer_level_min,json=trainerLevelMin" json:"trainer_level_min,omitempty"`
	TrainerLevelMax     int32       `protobuf:"varint,10,opt,name=trainer_level_max,json=trainerLevelMax" json:"trainer_level_max,omitempty"`
	VfxName             string      `protobuf:"bytes,11,opt,name=vfx_name,json=vfxName" json:"vfx_name,omitempty"`
	DurationMs          int32       `protobuf:"varint,12,opt,name=duration_ms,json=durationMs" json:"duration_ms,omitempty"`
	DamageWindowStartMs int32       `protobuf:"varint,13,opt,name=damage_window_start_ms,json=damageWindowStartMs" json:"damage_window_start_ms,omitempty"`
	DamageWindowEndMs   int32       `protobuf:"varint,14,opt,name=damage_window_end_ms,json=damageWindowEndMs" json:"damage_window_end_ms,omitempty"`
	EnergyDelta         int32       `protobuf:"varint,15,opt,name=energy_delta,json=energyDelta" json:"energy_delta,omitempty"`
}

func (m *MoveSettings) Reset()                    { *m = MoveSettings{} }
func (m *MoveSettings) String() string            { return proto.CompactTextString(m) }
func (*MoveSettings) ProtoMessage()               {}
func (*MoveSettings) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{13} }

func (m *MoveSettings) GetMovementId() PokemonMove {
	if m != nil {
		return m.MovementId
	}
	return PokemonMove_MOVE_UNSET
}

func (m *MoveSettings) GetAnimationId() int32 {
	if m != nil {
		return m.AnimationId
	}
	return 0
}

func (m *MoveSettings) GetPokemonType() PokemonType {
	if m != nil {
		return m.PokemonType
	}
	return PokemonType_POKEMON_TYPE_NONE
}

func (m *MoveSettings) GetPower() float32 {
	if m != nil {
		return m.Power
	}
	return 0
}

func (m *MoveSettings) GetAccuracyChance() float32 {
	if m != nil {
		return m.AccuracyChance
	}
	return 0
}

func (m *MoveSettings) GetCriticalChance() float32 {
	if m != nil {
		return m.CriticalChance
	}
	return 0
}

func (m *MoveSettings) GetHealScalar() float32 {
	if m != nil {
		return m.HealScalar
	}
	return 0
}

func (m *MoveSettings) GetStaminaLossScalar() float32 {
	if m != nil {
		return m.StaminaLossScalar
	}
	return 0
}

func (m *MoveSettings) GetTrainerLevelMin() int32 {
	if m != nil {
		return m.TrainerLevelMin
	}
	return 0
}

func (m *MoveSettings) GetTrainerLevelMax() int32 {
	if m != nil {
		return m.TrainerLevelMax
	}
	return 0
}

func (m *MoveSettings) GetVfxName() string {
	if m != nil {
		return m.VfxName
	}
	return ""
}

func (m *MoveSettings) GetDurationMs() int32 {
	if m != nil {
		return m.DurationMs
	}
	return 0
}

func (m *MoveSettings) GetDamageWindowStartMs() int32 {
	if m != nil {
		return m.DamageWindowStartMs
	}
	return 0
}

func (m *MoveSettings) GetDamageWindowEndMs() int32 {
	if m != nil {
		return m.DamageWindowEndMs
	}
	return 0
}

func (m *MoveSettings) GetEnergyDelta() int32 {
	if m != nil {
		return m.EnergyDelta
	}
	return 0
}

type PlayerLevelSettings struct {
	RankNum                 []int32   `protobuf:"varint,1,rep,packed,name=rank_num,json=rankNum" json:"rank_num,omitempty"`
	RequiredExperience      []int32   `protobuf:"varint,2,rep,packed,name=required_experience,json=requiredExperience" json:"required_experience,omitempty"`
	CpMultiplier            []float32 `protobuf:"fixed32,3,rep,packed,name=cp_multiplier,json=cpMultiplier" json:"cp_multiplier,omitempty"`
	MaxEggPlayerLevel       int32     `protobuf:"varint,4,opt,name=max_egg_player_level,json=maxEggPlayerLevel" json:"max_egg_player_level,omitempty"`
	MaxEncounterPlayerLevel int32     `protobuf:"varint,5,opt,name=max_encounter_player_level,json=maxEncounterPlayerLevel" json:"max_encounter_player_level,omitempty"`
}

func (m *PlayerLevelSettings) Reset()                    { *m = PlayerLevelSettings{} }
func (m *PlayerLevelSettings) String() string            { return proto.CompactTextString(m) }
func (*PlayerLevelSettings) ProtoMessage()               {}
func (*PlayerLevelSettings) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{14} }

func (m *PlayerLevelSettings) GetRankNum() []int32 {
	if m != nil {
		return m.RankNum
	}
	return nil
}

func (m *PlayerLevelSettings) GetRequiredExperience() []int32 {
	if m != nil {
		return m.RequiredExperience
	}
	return nil
}

func (m *PlayerLevelSettings) GetCpMultiplier() []float32 {
	if m != nil {
		return m.CpMultiplier
	}
	return nil
}

func (m *PlayerLevelSettings) GetMaxEggPlayerLevel() int32 {
	if m != nil {
		return m.MaxEggPlayerLevel
	}
	return 0
}

func (m *PlayerLevelSettings) GetMaxEncounterPlayerLevel() int32 {
	if m != nil {
		return m.MaxEncounterPlayerLevel
	}
	return 0
}

type PokemonSettings struct {
	PokemonId         PokemonId                 `protobuf:"varint,1,opt,name=pokemon_id,json=pokemonId,enum=SUNProtos.Enums.PokemonId" json:"pokemon_id,omitempty"`
	ModelScale        float32                   `protobuf:"fixed32,3,opt,name=model_scale,json=modelScale" json:"model_scale,omitempty"`
	Type              PokemonType               `protobuf:"varint,4,opt,name=type,enum=SUNProtos.Enums.PokemonType" json:"type,omitempty"`
	Type_2            PokemonType               `protobuf:"varint,5,opt,name=type_2,json=type2,enum=SUNProtos.Enums.PokemonType" json:"type_2,omitempty"`
	Camera            *CameraAttributes         `protobuf:"bytes,6,opt,name=camera" json:"camera,omitempty"`
	Encounter         *EncounterAttributes      `protobuf:"bytes,7,opt,name=encounter" json:"encounter,omitempty"`
	Stats             *StatsAttributes          `protobuf:"bytes,8,opt,name=stats" json:"stats,omitempty"`
	QuickMoves        []PokemonMove             `protobuf:"varint,9,rep,packed,name=quick_moves,json=quickMoves,enum=SUNProtos.Enums.PokemonMove" json:"quick_moves,omitempty"`
	CinematicMoves    []PokemonMove             `protobuf:"varint,10,rep,packed,name=cinematic_moves,json=cinematicMoves,enum=SUNProtos.Enums.PokemonMove" json:"cinematic_moves,omitempty"`
	AnimationTime     []float32                 `protobuf:"fixed32,11,rep,packed,name=animation_time,json=animationTime" json:"animation_time,omitempty"`
	EvolutionIds      []PokemonId               `protobuf:"varint,12,rep,packed,name=evolution_ids,json=evolutionIds,enum=SUNProtos.Enums.PokemonId" json:"evolution_ids,omitempty"`
	EvolutionPips     int32                     `protobuf:"varint,13,opt,name=evolution_pips,json=evolutionPips" json:"evolution_pips,omitempty"`
	Rarity            PokemonRarity             `protobuf:"varint,14,opt,name=rarity,enum=SUNProtos.Enums.PokemonRarity" json:"rarity,omitempty"`
	PokedexHeightM    float32                   `protobuf:"fixed32,15,opt,name=pokedex_height_m,json=pokedexHeightM" json:"pokedex_height_m,omitempty"`
	PokedexWeightKg   float32                   `protobuf:"fixed32,16,opt,name=pokedex_weight_kg,json=pokedexWeightKg" json:"pokedex_weight_kg,omitempty"`
	ParentPokemonId   PokemonId                 `protobuf:"varint,17,opt,name=parent_pokemon_id,json=parentPokemonId,enum=SUNProtos.Enums.PokemonId" json:"parent_pokemon_id,omitempty"`
	HeightStdDev      float32                   `protobuf:"fixed32,18,opt,name=height_std_dev,json=heightStdDev" json:"height_std_dev,omitempty"`
	WeightStdDev      float32                   `protobuf:"fixed32,19,opt,name=weight_std_dev,json=weightStdDev" json:"weight_std_dev,omitempty"`
	KmDistanceToHatch float32                   `protobuf:"fixed32,20,opt,name=km_distance_to_hatch,json=kmDistanceToHatch" json:"km_distance_to_hatch,omitempty"`
	FamilyId          PokemonFamilyId           `protobuf:"varint,21,opt,name=family_id,json=familyId,enum=SUNProtos.Enums.PokemonFamilyId" json:"family_id,omitempty"`
	CandyToEvolve     int32                     `protobuf:"varint,22,opt,name=candy_to_evolve,json=candyToEvolve" json:"candy_to_evolve,omitempty"`
	KmBuddyDistance   float32                   `protobuf:"fixed32,23,opt,name=km_buddy_distance,json=kmBuddyDistance" json:"km_buddy_distance,omitempty"`
	BuddySize         PokemonSettings_BuddySize `protobuf:"varint,24,opt,name=buddy_size,json=buddySize,enum=SUNProtos.Settings.Master.PokemonSettings_BuddySize" json:"buddy_size,omitempty"`
	ModelHeight       float32                   `protobuf:"fixed32,25,opt,name=model_height,json=modelHeight" json:"model_height,omitempty"`
	EvolutionBranch   []*EvolutionBranch        `protobuf:"bytes,26,rep,name=evolution_branch,json=evolutionBranch" json:"evolution_branch,omitempty"`
}

func (m *PokemonSettings) Reset()                    { *m = PokemonSettings{} }
func (m *PokemonSettings) String() string            { return proto.CompactTextString(m) }
func (*PokemonSettings) ProtoMessage()               {}
func (*PokemonSettings) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{15} }

func (m *PokemonSettings) GetPokemonId() PokemonId {
	if m != nil {
		return m.PokemonId
	}
	return PokemonId_MISSINGNO
}

func (m *PokemonSettings) GetModelScale() float32 {
	if m != nil {
		return m.ModelScale
	}
	return 0
}

func (m *PokemonSettings) GetType() PokemonType {
	if m != nil {
		return m.Type
	}
	return PokemonType_POKEMON_TYPE_NONE
}

func (m *PokemonSettings) GetType_2() PokemonType {
	if m != nil {
		return m.Type_2
	}
	return PokemonType_POKEMON_TYPE_NONE
}

func (m *PokemonSettings) GetCamera() *CameraAttributes {
	if m != nil {
		return m.Camera
	}
	return nil
}

func (m *PokemonSettings) GetEncounter() *EncounterAttributes {
	if m != nil {
		return m.Encounter
	}
	return nil
}

func (m *PokemonSettings) GetStats() *StatsAttributes {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *PokemonSettings) GetQuickMoves() []PokemonMove {
	if m != nil {
		return m.QuickMoves
	}
	return nil
}

func (m *PokemonSettings) GetCinematicMoves() []PokemonMove {
	if m != nil {
		return m.CinematicMoves
	}
	return nil
}

func (m *PokemonSettings) GetAnimationTime() []float32 {
	if m != nil {
		return m.AnimationTime
	}
	return nil
}

func (m *PokemonSettings) GetEvolutionIds() []PokemonId {
	if m != nil {
		return m.EvolutionIds
	}
	return nil
}

func (m *PokemonSettings) GetEvolutionPips() int32 {
	if m != nil {
		return m.EvolutionPips
	}
	return 0
}

func (m *PokemonSettings) GetRarity() PokemonRarity {
	if m != nil {
		return m.Rarity
	}
	return PokemonRarity_POKEMON_RARITY_NORMAL
}

func (m *PokemonSettings) GetPokedexHeightM() float32 {
	if m != nil {
		return m.PokedexHeightM
	}
	return 0
}

func (m *PokemonSettings) GetPokedexWeightKg() float32 {
	if m != nil {
		return m.PokedexWeightKg
	}
	return 0
}

func (m *PokemonSettings) GetParentPokemonId() PokemonId {
	if m != nil {
		return m.ParentPokemonId
	}
	return PokemonId_MISSINGNO
}

func (m *PokemonSettings) GetHeightStdDev() float32 {
	if m != nil {
		return m.HeightStdDev
	}
	return 0
}

func (m *PokemonSettings) GetWeightStdDev() float32 {
	if m != nil {
		return m.WeightStdDev
	}
	return 0
}

func (m *PokemonSettings) GetKmDistanceToHatch() float32 {
	if m != nil {
		return m.KmDistanceToHatch
	}
	return 0
}

func (m *PokemonSettings) GetFamilyId() PokemonFamilyId {
	if m != nil {
		return m.FamilyId
	}
	return PokemonFamilyId_FAMILY_UNSET
}

func (m *PokemonSettings) GetCandyToEvolve() int32 {
	if m != nil {
		return m.CandyToEvolve
	}
	return 0
}

func (m *PokemonSettings) GetKmBuddyDistance() float32 {
	if m != nil {
		return m.KmBuddyDistance
	}
	return 0
}

func (m *PokemonSettings) GetBuddySize() PokemonSettings_BuddySize {
	if m != nil {
		return m.BuddySize
	}
	return PokemonSettings_BUDDY_MEDIUM
}

func (m *PokemonSettings) GetModelHeight() float32 {
	if m != nil {
		return m.ModelHeight
	}
	return 0
}

func (m *PokemonSettings) GetEvolutionBranch() []*EvolutionBranch {
	if m != nil {
		return m.EvolutionBranch
	}
	return nil
}

type PokemonUpgradeSettings struct {
	UpgradesPerLevel         int32   `protobuf:"varint,1,opt,name=upgrades_per_level,json=upgradesPerLevel" json:"upgrades_per_level,omitempty"`
	AllowedLevelsAbovePlayer int32   `protobuf:"varint,2,opt,name=allowed_levels_above_player,json=allowedLevelsAbovePlayer" json:"allowed_levels_above_player,omitempty"`
	CandyCost                []int32 `protobuf:"varint,3,rep,packed,name=candy_cost,json=candyCost" json:"candy_cost,omitempty"`
	StardustCost             []int32 `protobuf:"varint,4,rep,packed,name=stardust_cost,json=stardustCost" json:"stardust_cost,omitempty"`
}

func (m *PokemonUpgradeSettings) Reset()                    { *m = PokemonUpgradeSettings{} }
func (m *PokemonUpgradeSettings) String() string            { return proto.CompactTextString(m) }
func (*PokemonUpgradeSettings) ProtoMessage()               {}
func (*PokemonUpgradeSettings) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{16} }

func (m *PokemonUpgradeSettings) GetUpgradesPerLevel() int32 {
	if m != nil {
		return m.UpgradesPerLevel
	}
	return 0
}

func (m *PokemonUpgradeSettings) GetAllowedLevelsAbovePlayer() int32 {
	if m != nil {
		return m.AllowedLevelsAbovePlayer
	}
	return 0
}

func (m *PokemonUpgradeSettings) GetCandyCost() []int32 {
	if m != nil {
		return m.CandyCost
	}
	return nil
}

func (m *PokemonUpgradeSettings) GetStardustCost() []int32 {
	if m != nil {
		return m.StardustCost
	}
	return nil
}

type QuestSettings struct {
	QuestType  QuestType           `protobuf:"varint,1,opt,name=quest_type,json=questType,enum=SUNProtos.Enums.QuestType" json:"quest_type,omitempty"`
	DailyQuest *DailyQuestSettings `protobuf:"bytes,2,opt,name=daily_quest,json=dailyQuest" json:"daily_quest,omitempty"`
}

func (m *QuestSettings) Reset()                    { *m = QuestSettings{} }
func (m *QuestSettings) String() string            { return proto.CompactTextString(m) }
func (*QuestSettings) ProtoMessage()               {}
func (*QuestSettings) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{17} }

func (m *QuestSettings) GetQuestType() QuestType {
	if m != nil {
		return m.QuestType
	}
	return QuestType_QUEST_UNKNOWN_TYPE
}

func (m *QuestSettings) GetDailyQuest() *DailyQuestSettings {
	if m != nil {
		return m.DailyQuest
	}
	return nil
}

type TypeEffectiveSettings struct {
	AttackScalar []float32   `protobuf:"fixed32,1,rep,packed,name=attack_scalar,json=attackScalar" json:"attack_scalar,omitempty"`
	AttackType   PokemonType `protobuf:"varint,2,opt,name=attack_type,json=attackType,enum=SUNProtos.Enums.PokemonType" json:"attack_type,omitempty"`
}

func (m *TypeEffectiveSettings) Reset()                    { *m = TypeEffectiveSettings{} }
func (m *TypeEffectiveSettings) String() string            { return proto.CompactTextString(m) }
func (*TypeEffectiveSettings) ProtoMessage()               {}
func (*TypeEffectiveSettings) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{18} }

func (m *TypeEffectiveSettings) GetAttackScalar() []float32 {
	if m != nil {
		return m.AttackScalar
	}
	return nil
}

func (m *TypeEffectiveSettings) GetAttackType() PokemonType {
	if m != nil {
		return m.AttackType
	}
	return PokemonType_POKEMON_TYPE_NONE
}

func init() {
	proto.RegisterType((*AvatarCustomizationSettings)(nil), "SUNProtos.Settings.Master.AvatarCustomizationSettings")
	proto.RegisterType((*BadgeSettings)(nil), "SUNProtos.Settings.Master.BadgeSettings")
	proto.RegisterType((*CameraSettings)(nil), "SUNProtos.Settings.Master.CameraSettings")
	proto.RegisterType((*EncounterSettings)(nil), "SUNProtos.Settings.Master.EncounterSettings")
	proto.RegisterType((*EquippedBadgeSettings)(nil), "SUNProtos.Settings.Master.EquippedBadgeSettings")
	proto.RegisterType((*FormSettings)(nil), "SUNProtos.Settings.Master.FormSettings")
	proto.RegisterType((*FormSettings_Form)(nil), "SUNProtos.Settings.Master.FormSettings.Form")
	proto.RegisterType((*GenderSettings)(nil), "SUNProtos.Settings.Master.GenderSettings")
	proto.RegisterType((*GymBattleSettings)(nil), "SUNProtos.Settings.Master.GymBattleSettings")
	proto.RegisterType((*GymLevelSettings)(nil), "SUNProtos.Settings.Master.GymLevelSettings")
	proto.RegisterType((*IapItemDisplay)(nil), "SUNProtos.Settings.Master.IapItemDisplay")
	proto.RegisterType((*IapSettings)(nil), "SUNProtos.Settings.Master.IapSettings")
	proto.RegisterType((*ItemSettings)(nil), "SUNProtos.Settings.Master.ItemSettings")
	proto.RegisterType((*MoveSequenceSettings)(nil), "SUNProtos.Settings.Master.MoveSequenceSettings")
	proto.RegisterType((*MoveSettings)(nil), "SUNProtos.Settings.Master.MoveSettings")
	proto.RegisterType((*PlayerLevelSettings)(nil), "SUNProtos.Settings.Master.PlayerLevelSettings")
	proto.RegisterType((*PokemonSettings)(nil), "SUNProtos.Settings.Master.PokemonSettings")
	proto.RegisterType((*PokemonUpgradeSettings)(nil), "SUNProtos.Settings.Master.PokemonUpgradeSettings")
	proto.RegisterType((*QuestSettings)(nil), "SUNProtos.Settings.Master.QuestSettings")
	proto.RegisterType((*TypeEffectiveSettings)(nil), "SUNProtos.Settings.Master.TypeEffectiveSettings")
	proto.RegisterEnum("SUNProtos.Settings.Master.AvatarCustomizationSettings_AvatarCustomizationPromoType", AvatarCustomizationSettings_AvatarCustomizationPromoType_name, AvatarCustomizationSettings_AvatarCustomizationPromoType_value)
	proto.RegisterEnum("SUNProtos.Settings.Master.AvatarCustomizationSettings_AvatarCustomizationUnlockType", AvatarCustomizationSettings_AvatarCustomizationUnlockType_name, AvatarCustomizationSettings_AvatarCustomizationUnlockType_value)
	proto.RegisterEnum("SUNProtos.Settings.Master.PokemonSettings_BuddySize", PokemonSettings_BuddySize_name, PokemonSettings_BuddySize_value)
}

func init() { proto.RegisterFile("settings_master.proto", fileDescriptor25) }

var fileDescriptor25 = []byte{
	// 3429 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x5a, 0xcd, 0x72, 0x1b, 0xc7,
	0x76, 0x36, 0x48, 0x82, 0x04, 0x0e, 0x7e, 0x08, 0xb6, 0x28, 0x09, 0xa2, 0x24, 0x4b, 0x86, 0xed,
	0x5c, 0x5d, 0x97, 0x43, 0x3b, 0xb0, 0xe3, 0x8a, 0x7d, 0xe3, 0xeb, 0xf0, 0x07, 0x14, 0x79, 0x4d,
	0x88, 0xc8, 0x00, 0xbc, 0x2e, 0x27, 0x95, 0x9a, 0x6a, 0xcc, 0x34, 0xc1, 0x29, 0xce, 0x9f, 0x7a,
	0x7a, 0x40, 0xc2, 0x79, 0x80, 0xbc, 0xc2, 0x5d, 0xe6, 0x05, 0xb2, 0x4e, 0x55, 0x2a, 0x59, 0x64,
	0x97, 0xec, 0xb3, 0xc8, 0x2b, 0x64, 0x9f, 0xaa, 0x6c, 0x53, 0x7d, 0x4e, 0xcf, 0x60, 0x40, 0x4a,
	0x24, 0x2b, 0x95, 0x8d, 0x38, 0xf3, 0x9d, 0xef, 0x7c, 0xdd, 0xd3, 0x3f, 0xe7, 0x9c, 0x6e, 0x08,
	0x1e, 0x26, 0x42, 0x29, 0x2f, 0x9c, 0x24, 0x76, 0xc0, 0x13, 0x25, 0xe4, 0x76, 0x2c, 0x23, 0x15,
	0xb1, 0x27, 0xc3, 0xd3, 0x37, 0x03, 0xfd, 0x94, 0x6c, 0x0f, 0x0d, 0x61, 0xbb, 0x8f, 0x84, 0xad,
	0x0d, 0x97, 0x2b, 0x6e, 0xc7, 0x3e, 0x9f, 0x65, 0xec, 0xad, 0x9a, 0x08, 0xd3, 0x20, 0x31, 0x2f,
	0x2d, 0xb4, 0x8f, 0xb9, 0x3b, 0x11, 0x06, 0x79, 0x7e, 0xad, 0x0d, 0x3b, 0x8e, 0x2e, 0x44, 0x10,
	0x85, 0xc6, 0xbc, 0xe9, 0x85, 0x53, 0x11, 0xaa, 0x48, 0xce, 0x6c, 0x4f, 0x89, 0xc0, 0xa0, 0x5b,
	0xd7, 0x9d, 0x0a, 0xb6, 0xa7, 0xd7, 0x6d, 0x6f, 0x53, 0x91, 0x28, 0x32, 0x76, 0xfe, 0x69, 0x0d,
	0x9e, 0xee, 0x4c, 0xb9, 0xe2, 0x72, 0x2f, 0x4d, 0x54, 0x14, 0x78, 0xbf, 0x70, 0xe5, 0x45, 0x61,
	0xf6, 0x19, 0xac, 0x0d, 0x6b, 0x22, 0xe4, 0x63, 0x5f, 0xb8, 0xed, 0xd2, 0xcb, 0xd2, 0xab, 0x8a,
	0x95, 0xbd, 0xb2, 0x43, 0xa8, 0x71, 0x74, 0xb4, 0xd5, 0x2c, 0x16, 0xed, 0xa5, 0x97, 0xa5, 0x57,
	0xcd, 0xee, 0xaf, 0xb6, 0xe7, 0x43, 0xb1, 0xcf, 0x15, 0xdf, 0x1e, 0xd0, 0x97, 0xd3, 0x1f, 0x6a,
	0x68, 0x34, 0x8b, 0x85, 0x05, 0x3c, 0x7f, 0x66, 0xbf, 0x86, 0x95, 0xc4, 0x8f, 0x54, 0x7b, 0xf9,
	0xe5, 0xf2, 0xab, 0x66, 0xf7, 0x61, 0x41, 0xa2, 0x87, 0x23, 0x35, 0xf4, 0x23, 0x65, 0x21, 0x85,
	0xbd, 0x80, 0xda, 0x38, 0x0d, 0x5d, 0x5f, 0xd8, 0x21, 0x0f, 0x44, 0x7b, 0xe5, 0x65, 0xe9, 0x55,
	0xd5, 0x02, 0x82, 0xde, 0xf0, 0x40, 0xb0, 0xe7, 0x00, 0x3c, 0x49, 0x84, 0x22, 0x7b, 0x19, 0xed,
	0x55, 0x44, 0x32, 0xf3, 0x44, 0x46, 0x69, 0x4c, 0xe6, 0x55, 0x32, 0x23, 0x92, 0x99, 0x93, 0x48,
	0x2a, 0x3b, 0x92, 0xae, 0x90, 0xed, 0xb5, 0x97, 0xa5, 0x57, 0x65, 0xab, 0xaa, 0x91, 0x13, 0x0d,
	0xb0, 0x14, 0x6a, 0x69, 0xe8, 0x47, 0xce, 0x05, 0x7d, 0x72, 0x05, 0x3f, 0x79, 0xb4, 0xfd, 0xde,
	0xd9, 0xdf, 0xbe, 0x65, 0x64, 0xdf, 0x65, 0x3b, 0x45, 0x71, 0x1a, 0x9f, 0x34, 0x7f, 0x66, 0x12,
	0x20, 0x96, 0x51, 0x10, 0x51, 0xab, 0x55, 0x1c, 0xa5, 0xe1, 0xff, 0x5f, 0xab, 0x03, 0xad, 0x8d,
	0x8d, 0x56, 0xe3, 0xec, 0x91, 0x1d, 0xc0, 0x86, 0xf9, 0x54, 0x5c, 0x9b, 0xd4, 0x34, 0xe0, 0x07,
	0x6f, 0xdd, 0x98, 0xa0, 0x5d, 0x4d, 0x41, 0x85, 0x75, 0x72, 0xca, 0x01, 0xf6, 0x18, 0xd6, 0x3c,
	0x1e, 0xdb, 0xc9, 0x45, 0xda, 0xae, 0xe1, 0x68, 0xaf, 0x7a, 0x3c, 0x1e, 0x5e, 0xa4, 0xec, 0x73,
	0x60, 0x0b, 0x0d, 0xf8, 0x62, 0x2a, 0xfc, 0x76, 0x1d, 0x87, 0xbc, 0x55, 0x50, 0x39, 0xd6, 0x38,
	0x7b, 0x0a, 0x55, 0xcf, 0x89, 0x42, 0x9a, 0xb6, 0x06, 0x0a, 0x55, 0x34, 0x80, 0xb3, 0xb6, 0x0d,
	0x0f, 0x8c, 0x14, 0xed, 0x33, 0xa3, 0xd5, 0x44, 0x2d, 0xf3, 0x19, 0xb4, 0x00, 0x51, 0xac, 0x73,
	0x0c, 0xcf, 0x6e, 0x1b, 0x06, 0xb6, 0x09, 0xad, 0xd3, 0x37, 0xc3, 0xde, 0xc8, 0x1e, 0x58, 0x27,
	0xfd, 0x13, 0x7b, 0xf4, 0xf3, 0xa0, 0xd7, 0xfa, 0x80, 0x55, 0x60, 0x65, 0xb8, 0x73, 0xdc, 0x6b,
	0x95, 0x58, 0x1d, 0x2a, 0x07, 0xbd, 0x9d, 0xd1, 0xa9, 0xd5, 0xdb, 0x6f, 0x2d, 0x75, 0x66, 0xf0,
	0xfc, 0xd6, 0xa9, 0x64, 0x0f, 0x61, 0x83, 0xe4, 0x4e, 0xdf, 0x1c, 0x9f, 0xec, 0xfd, 0x98, 0xe9,
	0xd5, 0x60, 0x6d, 0xbf, 0x77, 0xb0, 0x73, 0x7a, 0x3c, 0x6a, 0x95, 0x58, 0x0b, 0xea, 0xfd, 0xde,
	0xfe, 0xce, 0xb1, 0x6d, 0xf5, 0x7e, 0xda, 0xb1, 0xf6, 0x5b, 0x4b, 0x1a, 0x39, 0xda, 0x19, 0xd8,
	0x7b, 0xc7, 0x27, 0xa3, 0xc3, 0xa3, 0x37, 0xaf, 0x5b, 0xcb, 0x1a, 0x39, 0xee, 0xfd, 0xbe, 0x97,
	0x73, 0x56, 0x3a, 0xff, 0x51, 0x82, 0x06, 0x0e, 0x52, 0xbe, 0x5d, 0xbf, 0x05, 0x28, 0xcc, 0x57,
	0xe9, 0xce, 0xf9, 0xaa, 0x8e, 0xf3, 0x99, 0x7a, 0x9e, 0xb9, 0x4a, 0x1e, 0x5e, 0xe0, 0x76, 0x2e,
	0x1b, 0xb3, 0xc5, 0xc3, 0x0b, 0x1d, 0x08, 0x14, 0x97, 0x13, 0xa1, 0x12, 0xdc, 0xa7, 0x65, 0x2b,
	0x7b, 0x65, 0x27, 0xd0, 0x74, 0x78, 0xac, 0x52, 0x29, 0x6c, 0x29, 0x2e, 0xb9, 0x74, 0xdb, 0x2b,
	0x2f, 0x97, 0x5f, 0xd5, 0xba, 0xaf, 0xae, 0xc7, 0x02, 0x6c, 0x96, 0xfe, 0xdd, 0x23, 0x07, 0x0b,
	0xf9, 0x56, 0xc3, 0x29, 0xbe, 0x76, 0xfe, 0xb5, 0x0c, 0xcd, 0x3d, 0x1e, 0x08, 0xc9, 0xf3, 0xef,
	0x7a, 0x01, 0xb5, 0x50, 0x5c, 0x29, 0xdb, 0x41, 0x18, 0x3f, 0xac, 0x6a, 0x81, 0x86, 0x88, 0xc8,
	0x7e, 0x07, 0x0d, 0x2f, 0x54, 0x42, 0xc6, 0x91, 0x8f, 0xe3, 0xdf, 0x5e, 0xc2, 0x6d, 0xf2, 0xc9,
	0x8d, 0x6f, 0x27, 0xfe, 0x51, 0x91, 0x6b, 0x2d, 0xba, 0xb2, 0xdf, 0x42, 0x8d, 0xbe, 0x8d, 0x46,
	0x91, 0xc2, 0xd2, 0xf3, 0xf7, 0x28, 0x8d, 0x90, 0x69, 0x01, 0x79, 0xe0, 0x48, 0x76, 0xa0, 0x21,
	0x78, 0x22, 0x6c, 0x2f, 0xb4, 0x93, 0x58, 0x08, 0x1a, 0x8f, 0x25, 0xab, 0xa6, 0xc1, 0xa3, 0x70,
	0xa8, 0x21, 0xf6, 0x09, 0x34, 0x05, 0x4f, 0x94, 0x1d, 0xa5, 0xca, 0x90, 0xca, 0x48, 0xaa, 0x6b,
	0xf4, 0x24, 0x55, 0xc4, 0xfa, 0x35, 0xb4, 0xdc, 0x54, 0x62, 0xaf, 0xec, 0x44, 0x38, 0x51, 0xe8,
	0x26, 0xed, 0x55, 0xe4, 0xad, 0x67, 0xf8, 0x90, 0x60, 0xf6, 0x11, 0xd4, 0x2f, 0xb9, 0xa7, 0x72,
	0xda, 0x1a, 0xb5, 0xa9, 0xb1, 0x8c, 0xf2, 0xc7, 0xc0, 0x94, 0xe4, 0x61, 0xe2, 0x2d, 0xe8, 0x55,
	0x90, 0xb8, 0x31, 0xb7, 0x14, 0x14, 0x79, 0x38, 0xf1, 0x85, 0xed, 0x8a, 0x89, 0x14, 0x14, 0x78,
	0x96, 0xac, 0x1a, 0x62, 0xfb, 0x08, 0xe9, 0x9d, 0x47, 0x94, 0xe8, 0xec, 0x4c, 0x07, 0x5d, 0xc3,
	0x04, 0x92, 0x44, 0xd3, 0x09, 0x5a, 0x0c, 0xff, 0x23, 0xa8, 0xc7, 0x9e, 0x72, 0xce, 0x33, 0x62,
	0x8d, 0x24, 0x11, 0x9b, 0x4b, 0x12, 0x65, 0x51, 0xb2, 0x4e, 0x92, 0x68, 0x5a, 0x90, 0x7c, 0x01,
	0x35, 0x19, 0xf9, 0x7e, 0xc6, 0x6b, 0x20, 0x0f, 0x34, 0x64, 0x08, 0xbf, 0x82, 0x75, 0xd7, 0x4b,
	0x14, 0x0f, 0x1d, 0x61, 0x07, 0x42, 0x09, 0x99, 0xb4, 0x9b, 0x48, 0x6a, 0x66, 0x70, 0x1f, 0x51,
	0xf6, 0x29, 0x34, 0xcf, 0x85, 0x37, 0x39, 0x57, 0x76, 0x2c, 0xa4, 0x23, 0x42, 0xd5, 0x5e, 0x47,
	0x5e, 0x83, 0xd0, 0x01, 0x81, 0x7a, 0xe6, 0xa6, 0x42, 0x2a, 0xdb, 0x51, 0xd2, 0xc6, 0x29, 0x68,
	0xb7, 0x68, 0xe6, 0x34, 0xba, 0xa7, 0xa4, 0xa5, 0xb1, 0xce, 0x1f, 0x96, 0x60, 0xa3, 0x17, 0x3a,
	0x51, 0xaa, 0x57, 0x56, 0xbe, 0x8c, 0xbf, 0x84, 0xcd, 0x24, 0xf6, 0x42, 0x7b, 0x1c, 0x85, 0x69,
	0x62, 0xab, 0x73, 0x29, 0x92, 0xf3, 0xc8, 0xa7, 0xd4, 0xba, 0x64, 0x31, 0x6d, 0xdb, 0xd5, 0xa6,
	0x51, 0x66, 0x61, 0xdf, 0xc1, 0x13, 0x71, 0xe5, 0x08, 0xdf, 0x17, 0xa1, 0xd2, 0x0e, 0xd1, 0x65,
	0xc1, 0x6d, 0x09, 0xdd, 0x1e, 0xe7, 0x84, 0x91, 0xb6, 0xcf, 0x7d, 0xbb, 0xf0, 0x70, 0x22, 0x05,
	0xbf, 0xe9, 0xb7, 0x8c, 0x7e, 0x0f, 0xd0, 0x78, 0xcd, 0xe7, 0x4b, 0xd8, 0x0c, 0x3d, 0x47, 0xdc,
	0x70, 0x59, 0xa1, 0x1e, 0x6a, 0xdb, 0x35, 0x8f, 0x2f, 0xe0, 0x41, 0xe0, 0xf9, 0x22, 0x51, 0x51,
	0x28, 0x0a, 0x0e, 0x65, 0x0c, 0x20, 0x2c, 0x37, 0xe5, 0x0e, 0x9d, 0x7f, 0x2e, 0xc1, 0xc3, 0xde,
	0xdb, 0xd4, 0x8b, 0x63, 0xe1, 0x2e, 0x46, 0xaf, 0x3f, 0x85, 0xc7, 0x42, 0x1b, 0x4c, 0x4a, 0x70,
	0xa2, 0xc8, 0x77, 0xa3, 0xcb, 0xd0, 0x0e, 0x12, 0x1c, 0xa1, 0x65, 0x6b, 0x13, 0xcd, 0x14, 0x41,
	0x8c, 0xb1, 0x9f, 0xb0, 0x6f, 0xe0, 0xb1, 0xc3, 0xf5, 0x92, 0x89, 0x65, 0x34, 0xe6, 0x63, 0xcf,
	0xf7, 0xd4, 0x8c, 0x86, 0x18, 0xa3, 0xc0, 0x92, 0xf5, 0x10, 0xcd, 0x83, 0xb9, 0x15, 0x07, 0x99,
	0x7d, 0x0d, 0x8f, 0xce, 0x7c, 0x21, 0xde, 0xe1, 0xb6, 0x8c, 0x6e, 0x9b, 0xda, 0x7a, 0xdd, 0xab,
	0xf3, 0x5f, 0x25, 0xa8, 0x1f, 0x44, 0x32, 0xc8, 0x7b, 0xfd, 0x35, 0xac, 0x99, 0x12, 0xed, 0xbd,
	0x01, 0x77, 0x40, 0xf6, 0x23, 0xd7, 0xca, 0xa8, 0x6c, 0x17, 0xca, 0x67, 0x91, 0x0c, 0xa8, 0x8b,
	0xb5, 0xee, 0xe7, 0xb7, 0xe4, 0xf3, 0x62, 0x6b, 0xf8, 0x62, 0x91, 0xeb, 0x96, 0x0d, 0x2b, 0xfa,
	0x55, 0x17, 0x50, 0x1a, 0x30, 0xcd, 0xdf, 0x2c, 0xa0, 0xd0, 0x07, 0x29, 0x3a, 0xed, 0x52, 0x7d,
	0x64, 0xca, 0xa8, 0x29, 0xf7, 0x53, 0x61, 0xa2, 0x7d, 0x0b, 0x2d, 0xbb, 0x68, 0xf8, 0xbd, 0xc6,
	0x3b, 0x7f, 0x28, 0x41, 0xf3, 0xb5, 0x08, 0xdd, 0xc2, 0x12, 0xfe, 0xbf, 0x7d, 0xed, 0x00, 0x56,
	0x27, 0xa8, 0x83, 0x4d, 0xd5, 0xba, 0x7f, 0x76, 0xcb, 0xe7, 0x1a, 0xf7, 0xec, 0xef, 0x62, 0xfb,
	0x96, 0xd1, 0xe9, 0xfc, 0xc3, 0x2a, 0x6c, 0xbc, 0x9e, 0x05, 0xbb, 0x5c, 0x29, 0x7f, 0xbe, 0x82,
	0x74, 0x58, 0x0d, 0x85, 0x9c, 0xcc, 0xf4, 0x1e, 0xd6, 0x21, 0xce, 0x6c, 0xad, 0x3a, 0xa1, 0x03,
	0x2d, 0xe4, 0xb0, 0xcf, 0x60, 0xc3, 0x8d, 0xf4, 0x0a, 0x33, 0x5c, 0x27, 0x4a, 0x94, 0xd9, 0x4c,
	0xeb, 0x68, 0xe8, 0x21, 0xbe, 0x17, 0x25, 0x4a, 0x87, 0x60, 0x29, 0x4c, 0x3a, 0xc8, 0x42, 0x26,
	0xed, 0x9f, 0xf5, 0x0c, 0xcf, 0x02, 0x66, 0x17, 0x1e, 0x8a, 0x50, 0x04, 0x33, 0x9b, 0x2b, 0xc5,
	0x9d, 0x0b, 0x1b, 0xb3, 0xca, 0x94, 0xfb, 0x66, 0xf3, 0x3c, 0x40, 0xe3, 0x0e, 0xda, 0x8e, 0x8c,
	0x49, 0xaf, 0x41, 0xc3, 0x4e, 0x84, 0x9c, 0xea, 0xc2, 0x3d, 0x73, 0x2a, 0xa3, 0xd3, 0x26, 0x59,
	0x87, 0x68, 0x2c, 0x7a, 0xc9, 0x28, 0x0d, 0x5d, 0xfb, 0x1d, 0xd9, 0x01, 0xbd, 0xd0, 0xba, 0x7f,
	0x2d, 0x45, 0xfc, 0x39, 0x3c, 0x35, 0x81, 0xc7, 0x0b, 0x04, 0x0e, 0x10, 0xf7, 0xfd, 0x59, 0x21,
	0x63, 0x60, 0x34, 0x41, 0xca, 0xc8, 0x0b, 0xc4, 0x40, 0xc8, 0x1d, 0xdf, 0x9f, 0x65, 0xde, 0x3f,
	0xc0, 0xb3, 0x80, 0x5f, 0x79, 0x41, 0x1a, 0x98, 0xef, 0x13, 0x32, 0x41, 0x91, 0x31, 0x4e, 0x01,
	0x56, 0xc3, 0x65, 0xeb, 0x89, 0xe1, 0xec, 0x64, 0x94, 0x81, 0x90, 0x34, 0x47, 0xec, 0x10, 0x3e,
	0x4a, 0x78, 0x40, 0xa5, 0x49, 0x36, 0x44, 0xd4, 0x9f, 0x20, 0xf5, 0x95, 0x17, 0xfb, 0x9e, 0x90,
	0xed, 0x2a, 0x76, 0xe2, 0xb9, 0x26, 0xea, 0x5c, 0x4a, 0x32, 0xb8, 0xf1, 0xfa, 0x39, 0x49, 0x47,
	0xea, 0xac, 0x2b, 0x34, 0x83, 0x58, 0x99, 0x96, 0xad, 0x86, 0x41, 0x69, 0xfa, 0xd8, 0x6f, 0xe1,
	0x99, 0x99, 0x60, 0x57, 0xf8, 0xfa, 0x14, 0x26, 0xa4, 0x7d, 0x2e, 0xb8, 0xaf, 0xce, 0x6d, 0x5f,
	0xcf, 0x78, 0x0d, 0xdb, 0x6a, 0x13, 0x67, 0x5f, 0x53, 0x06, 0x42, 0x1e, 0x22, 0xe1, 0x58, 0x4f,
	0x7d, 0xbe, 0x4c, 0xf2, 0x51, 0x0e, 0x12, 0x53, 0xa1, 0xd2, 0x32, 0xc9, 0x06, 0xb8, 0x8f, 0x91,
	0x3d, 0xf0, 0x42, 0xec, 0xd2, 0x42, 0x11, 0xda, 0xc8, 0xc2, 0x20, 0xda, 0x0a, 0x55, 0x28, 0x7b,
	0x05, 0xad, 0xe4, 0x92, 0xc7, 0x0b, 0xe2, 0x54, 0xb2, 0x36, 0x35, 0x5e, 0xd0, 0xde, 0x83, 0x0f,
	0x4d, 0x3f, 0x78, 0xc0, 0x75, 0x81, 0x26, 0xdc, 0xd4, 0x41, 0x97, 0x79, 0xa2, 0xd2, 0x5f, 0xf2,
	0x94, 0x3a, 0x85, 0x24, 0x2b, 0xe3, 0x98, 0xb4, 0xd5, 0xf9, 0xc7, 0x12, 0xb4, 0x5e, 0xcf, 0x02,
	0x6c, 0x3b, 0xdf, 0x2e, 0x5f, 0xc0, 0x03, 0xa9, 0x43, 0xaa, 0x14, 0xae, 0x2d, 0xae, 0x62, 0x21,
	0x3d, 0x11, 0x3a, 0xba, 0x6e, 0xd4, 0x05, 0x1e, 0xcb, 0x4c, 0xbd, 0xdc, 0xa2, 0x13, 0xb8, 0x2f,
	0xb8, 0xab, 0xf7, 0x96, 0x1f, 0x29, 0x0a, 0x5e, 0x65, 0xab, 0x46, 0x98, 0x3e, 0xa7, 0x25, 0xec,
	0x63, 0x68, 0x28, 0xc9, 0xbd, 0x30, 0xe7, 0x50, 0xb9, 0x58, 0x37, 0x20, 0x91, 0x3e, 0x83, 0x8d,
	0x44, 0x70, 0xe9, 0x9c, 0xdb, 0x98, 0xbc, 0x29, 0xea, 0xae, 0x20, 0x71, 0x9d, 0x0c, 0x56, 0xe4,
	0xfb, 0x14, 0x70, 0xff, 0xb3, 0x04, 0xcd, 0x23, 0x1e, 0x1f, 0x29, 0x11, 0xec, 0x7b, 0x89, 0x1e,
	0x5d, 0xd6, 0x82, 0x65, 0x7d, 0xa2, 0xa0, 0x32, 0x50, 0x3f, 0xb2, 0xbf, 0x80, 0x8a, 0xc3, 0x95,
	0x98, 0x44, 0x72, 0x66, 0x8e, 0xa2, 0x37, 0x4b, 0xbf, 0xc3, 0xc8, 0x8f, 0x8c, 0xd0, 0x9e, 0xe1,
	0x5a, 0xb9, 0xd7, 0xb5, 0xb3, 0xdf, 0xf2, 0xf5, 0xb3, 0xdf, 0x6f, 0xa0, 0xa2, 0xcf, 0xd4, 0xb6,
	0xe7, 0x52, 0x47, 0x9b, 0xdd, 0x97, 0x85, 0x06, 0x8e, 0xb2, 0x43, 0xf9, 0xb6, 0x56, 0xc7, 0x7f,
	0x74, 0xf8, 0xf3, 0xf0, 0x6f, 0xc2, 0x1e, 0xc1, 0x2a, 0x96, 0x02, 0x09, 0x56, 0x79, 0x65, 0xcb,
	0xbc, 0x75, 0xfe, 0x65, 0x19, 0x6a, 0x47, 0x3c, 0xce, 0xe7, 0x43, 0xaf, 0x38, 0xee, 0xf9, 0x26,
	0x0d, 0xd9, 0x4e, 0xe4, 0x85, 0x94, 0xfa, 0xf4, 0x8a, 0xd3, 0x06, 0x1c, 0x91, 0x3d, 0x0d, 0xb3,
	0x03, 0x78, 0x49, 0x5c, 0x57, 0x9c, 0x61, 0x48, 0x34, 0x4e, 0xf1, 0xfc, 0xca, 0xc0, 0x4c, 0xcf,
	0x33, 0xe4, 0xed, 0x1b, 0x1a, 0x4a, 0x0c, 0x84, 0x34, 0xe1, 0x95, 0xfd, 0x0e, 0x3a, 0xef, 0xd4,
	0x09, 0xf8, 0x55, 0x0e, 0x25, 0x66, 0x3c, 0x3e, 0xbc, 0xa9, 0xd4, 0xe7, 0x57, 0xd9, 0x7b, 0xc2,
	0x76, 0xe0, 0xf9, 0x3b, 0xb5, 0x9c, 0x54, 0x4a, 0x11, 0x3a, 0x33, 0x1c, 0xb9, 0xaa, 0xb5, 0x75,
	0x53, 0x66, 0xcf, 0x30, 0xd8, 0x77, 0xb0, 0x15, 0x78, 0x21, 0x85, 0xa8, 0xb1, 0x50, 0x97, 0x42,
	0x84, 0xb6, 0xe3, 0x73, 0x2f, 0x48, 0xf4, 0x06, 0x29, 0x63, 0x19, 0xf0, 0x28, 0xf0, 0x42, 0x1d,
	0xa1, 0x76, 0xc9, 0xbe, 0x87, 0xe6, 0x7e, 0xa2, 0x6b, 0xc7, 0xe2, 0xf0, 0x65, 0x17, 0x17, 0xab,
	0x78, 0x71, 0xb1, 0x31, 0x1f, 0xc0, 0x9e, 0xb9, 0xc2, 0xf8, 0x01, 0x9e, 0xbd, 0xb3, 0xbb, 0x99,
	0xe3, 0x1a, 0x3a, 0x3e, 0xb9, 0xd9, 0x5b, 0x23, 0xd0, 0xf9, 0xb7, 0x0a, 0xd4, 0xf5, 0x5c, 0x17,
	0xce, 0x5f, 0x6b, 0x66, 0x95, 0x98, 0xec, 0x78, 0xf7, 0x22, 0x59, 0xa5, 0x45, 0xc2, 0x7e, 0x80,
	0x2a, 0xba, 0x16, 0x6e, 0x53, 0x3a, 0xb7, 0x3b, 0xe3, 0x09, 0x0e, 0x57, 0x25, 0x1e, 0x3b, 0xbe,
	0x2d, 0x6c, 0x81, 0x65, 0xf4, 0xbf, 0x79, 0x66, 0x79, 0xcf, 0xda, 0x7f, 0x0a, 0x55, 0x57, 0x46,
	0xb1, 0x7d, 0x26, 0xc5, 0x5b, 0x93, 0xad, 0x2a, 0x1a, 0x38, 0x90, 0xe2, 0xad, 0x2e, 0x19, 0xd0,
	0x98, 0xed, 0x6a, 0x0a, 0x6c, 0x54, 0xdf, 0xb5, 0xb4, 0x65, 0x44, 0x06, 0x0a, 0x6b, 0x6f, 0xa0,
	0xa2, 0x57, 0xdf, 0x98, 0xfb, 0x3e, 0x0e, 0x7c, 0xad, 0xdb, 0xbd, 0x25, 0xd7, 0xe3, 0xb7, 0x0c,
	0x0c, 0x7f, 0x47, 0x29, 0xe9, 0x8d, 0x53, 0x25, 0x12, 0x2b, 0xd7, 0x60, 0x87, 0xb0, 0x1a, 0x47,
	0x78, 0xa2, 0x5b, 0x43, 0xb5, 0x2f, 0xef, 0x56, 0xd3, 0xec, 0x82, 0x96, 0xf1, 0xd7, 0x4a, 0x52,
	0x4c, 0xbd, 0x29, 0xa5, 0xaa, 0x7b, 0x28, 0x59, 0xc8, 0x2e, 0x2a, 0x91, 0xbf, 0x56, 0x32, 0x49,
	0xaf, 0x7a, 0x3f, 0x25, 0xca, 0x80, 0x45, 0x25, 0xf2, 0x67, 0xbb, 0xba, 0x72, 0x8b, 0x5c, 0xcc,
	0x5f, 0xb5, 0xee, 0xf6, 0x5d, 0x3a, 0x07, 0x51, 0xe4, 0x16, 0x54, 0xd0, 0x97, 0x4d, 0x60, 0x63,
	0x7e, 0x27, 0x98, 0xc6, 0x13, 0xc9, 0x5d, 0x81, 0xb9, 0xad, 0xd6, 0xfd, 0xee, 0x2e, 0xc1, 0x7c,
	0x55, 0x9d, 0x92, 0x5f, 0x41, 0xbc, 0xe5, 0x5d, 0xb3, 0xb1, 0x11, 0x54, 0xae, 0x62, 0x7b, 0x1c,
	0xe9, 0xdc, 0x59, 0x47, 0xfd, 0x6f, 0xef, 0xd2, 0x9f, 0xa7, 0x8e, 0x5d, 0xed, 0x56, 0x90, 0x5f,
	0xbb, 0x8a, 0x11, 0x62, 0x3f, 0xc2, 0x9a, 0x17, 0x3a, 0x22, 0x4c, 0xe8, 0x62, 0xa7, 0xd6, 0xfd,
	0x93, 0xbb, 0x3b, 0x8d, 0xf4, 0xa2, 0x98, 0x51, 0x60, 0x7f, 0x0d, 0x0d, 0x31, 0x99, 0xd8, 0x5e,
	0xe8, 0xa4, 0x63, 0xae, 0x22, 0x89, 0x19, 0xb5, 0xd6, 0xfd, 0xe6, 0xce, 0x7e, 0x4e, 0x26, 0x47,
	0x99, 0x4f, 0x41, 0xb7, 0x2e, 0x0a, 0xb8, 0x16, 0x3f, 0xd3, 0x19, 0x22, 0x88, 0x5c, 0xef, 0x4c,
	0x17, 0x2b, 0xeb, 0xf7, 0x13, 0x3f, 0x88, 0xa4, 0xea, 0x1b, 0x9f, 0xa2, 0xf8, 0x59, 0x01, 0xef,
	0x74, 0x61, 0xb3, 0x1f, 0x4d, 0xc5, 0x50, 0xbc, 0x4d, 0xf5, 0x70, 0xe5, 0x11, 0x65, 0x0b, 0x2a,
	0x89, 0xc1, 0x30, 0x2f, 0x57, 0xad, 0xfc, 0xbd, 0xf3, 0x77, 0x65, 0xa8, 0x93, 0x93, 0x21, 0x7f,
	0x0f, 0xb5, 0x20, 0x9a, 0x8a, 0x40, 0x1f, 0x16, 0xf3, 0x10, 0xf4, 0xec, 0x7d, 0x05, 0xba, 0x76,
	0xb5, 0x20, 0x73, 0x38, 0x72, 0xe9, 0xc4, 0xef, 0x05, 0x54, 0x8e, 0x78, 0xae, 0x39, 0x16, 0xd4,
	0x72, 0x0c, 0xa3, 0x54, 0xdd, 0x24, 0x97, 0xec, 0x72, 0xe4, 0xd6, 0x26, 0x30, 0x44, 0xd5, 0xe2,
	0xf9, 0x0b, 0xdb, 0x84, 0x72, 0x1c, 0x5d, 0x0a, 0x69, 0xc2, 0x0c, 0xbd, 0xe8, 0x43, 0x3a, 0x77,
	0x9c, 0x54, 0x72, 0x67, 0x66, 0x3b, 0xe7, 0xfa, 0x50, 0x6e, 0xea, 0xdf, 0x66, 0x06, 0xef, 0x21,
	0xaa, 0x89, 0x8e, 0xf4, 0x94, 0xe7, 0x70, 0x3f, 0x23, 0x52, 0xc9, 0xdb, 0xcc, 0x60, 0x43, 0x7c,
	0x01, 0x35, 0x5d, 0xeb, 0xd9, 0x89, 0xc3, 0x7d, 0x2e, 0x4d, 0x71, 0x0b, 0x1a, 0x1a, 0x22, 0xa2,
	0x93, 0x45, 0xa2, 0x78, 0xe0, 0x85, 0x5c, 0x57, 0x83, 0x49, 0x46, 0xac, 0x20, 0x71, 0xc3, 0x98,
	0x8e, 0xa3, 0x24, 0x31, 0xfc, 0xcf, 0x60, 0x63, 0x21, 0x02, 0xda, 0x81, 0x17, 0xe2, 0xfe, 0x2f,
	0x5b, 0xeb, 0xaa, 0x10, 0x01, 0xfb, 0x5e, 0xf8, 0x0e, 0x2e, 0xbf, 0x32, 0x35, 0xea, 0x22, 0x97,
	0x5f, 0xb1, 0x27, 0x50, 0x99, 0x9e, 0x5d, 0xd1, 0xcd, 0x26, 0x5d, 0x91, 0xae, 0x4d, 0xcf, 0xae,
	0xf0, 0x62, 0xf3, 0x05, 0xd4, 0x6e, 0x96, 0x9e, 0xe0, 0xce, 0x2b, 0xc3, 0xaf, 0xe0, 0x91, 0xa9,
	0x09, 0x2f, 0xbd, 0xd0, 0x8d, 0x2e, 0xed, 0x44, 0x71, 0xbd, 0x40, 0x13, 0x53, 0x77, 0x3e, 0x20,
	0xeb, 0x4f, 0x68, 0x1c, 0x6a, 0x5b, 0x5f, 0x17, 0x7d, 0x9b, 0x8b, 0x4e, 0x22, 0x74, 0xe7, 0xc5,
	0xe7, 0x46, 0xd1, 0xa5, 0x17, 0xba, 0x7d, 0xbc, 0x08, 0x2a, 0xd6, 0xd1, 0xb8, 0xec, 0xcb, 0x56,
	0xad, 0x50, 0x37, 0x77, 0xfe, 0xbb, 0x04, 0x0f, 0x0a, 0xc5, 0x6d, 0xbe, 0x20, 0x9f, 0x40, 0x45,
	0xf2, 0xf0, 0xc2, 0x0e, 0xd3, 0xc0, 0x54, 0x95, 0x6b, 0xfa, 0xfd, 0x4d, 0x1a, 0xbc, 0xaf, 0xf6,
	0x5c, 0x7a, 0x6f, 0xed, 0xf9, 0x31, 0x34, 0x9c, 0xb8, 0x78, 0x56, 0xa0, 0x53, 0x7a, 0xdd, 0x89,
	0x0b, 0x47, 0x83, 0x2f, 0x60, 0x53, 0x17, 0x2e, 0x3a, 0x08, 0x2c, 0xd4, 0xe1, 0x2b, 0xf4, 0x71,
	0x01, 0xbf, 0xea, 0x4d, 0x26, 0xc5, 0x32, 0xfc, 0x37, 0xb0, 0x85, 0x0e, 0xd9, 0x5d, 0xcd, 0xa2,
	0x1b, 0x65, 0xb9, 0xc7, 0xda, 0x2d, 0x23, 0x14, 0x6f, 0x92, 0xff, 0xa7, 0x06, 0xeb, 0x66, 0xa5,
	0x17, 0xaf, 0x60, 0xb3, 0x1d, 0x92, 0x6f, 0xc1, 0xdb, 0xce, 0xc8, 0xd5, 0x38, 0x7b, 0xd4, 0xf3,
	0x1d, 0x44, 0xae, 0xa0, 0x45, 0x2b, 0xcc, 0x31, 0x13, 0x10, 0xd2, 0x8b, 0x50, 0xb0, 0x2f, 0x61,
	0x05, 0x77, 0xdd, 0xca, 0x3d, 0x76, 0x1d, 0x32, 0xd9, 0x57, 0xb0, 0x8a, 0xe7, 0xad, 0x2e, 0x7e,
	0xca, 0x5d, 0x3e, 0x65, 0xcd, 0xed, 0xb2, 0x1f, 0x61, 0xd5, 0x5c, 0xb4, 0x52, 0x06, 0xff, 0xea,
	0x1e, 0xa7, 0x75, 0xba, 0x0d, 0x2d, 0xa6, 0x38, 0x92, 0x60, 0x23, 0xa8, 0xe6, 0x83, 0x6b, 0x72,
	0xf8, 0x37, 0xf7, 0xd0, 0xcb, 0xc7, 0xbb, 0x20, 0x39, 0x17, 0x62, 0x87, 0x50, 0x4e, 0x14, 0x57,
	0x89, 0xc9, 0xe5, 0xdd, 0x7b, 0x28, 0x0e, 0x35, 0xbf, 0xa0, 0x46, 0x02, 0x3a, 0x66, 0xbe, 0x4d,
	0x3d, 0xe7, 0xc2, 0xd6, 0x81, 0x30, 0x31, 0x3f, 0xaf, 0xdc, 0x11, 0x33, 0xd1, 0x41, 0x3f, 0x26,
	0xac, 0x07, 0xeb, 0x8e, 0x17, 0x0a, 0x1d, 0x20, 0x1d, 0x23, 0x01, 0xf7, 0x90, 0x68, 0xe6, 0x4e,
	0x24, 0xf3, 0x29, 0x34, 0xe7, 0xa1, 0x57, 0x17, 0xbf, 0xe6, 0x6e, 0xb4, 0x91, 0xa3, 0xba, 0xe0,
	0x65, 0x3f, 0x40, 0x43, 0x4c, 0x23, 0x3f, 0x35, 0x11, 0x3a, 0xc1, 0x7b, 0xd1, 0xdb, 0xd7, 0x57,
	0x3d, 0x77, 0xd0, 0x27, 0x91, 0x4f, 0xa1, 0x39, 0x17, 0x88, 0xbd, 0x38, 0x8b, 0x14, 0x73, 0xd9,
	0x81, 0x17, 0x27, 0xec, 0x1b, 0x58, 0x95, 0x5c, 0x7a, 0x6a, 0x86, 0x51, 0xa1, 0xd9, 0xfd, 0xf0,
	0x7d, 0x0d, 0x58, 0xc8, 0xb2, 0x0c, 0x5b, 0x1f, 0x6a, 0xf5, 0x72, 0x76, 0xc5, 0x95, 0x6d, 0xee,
	0x52, 0x03, 0x73, 0x38, 0x6d, 0x1a, 0xfc, 0x10, 0xe1, 0xbe, 0x0e, 0x91, 0x19, 0xf3, 0x92, 0x98,
	0x17, 0x93, 0x76, 0x8b, 0x2e, 0x56, 0x8c, 0xe1, 0x27, 0xc4, 0x7f, 0x9c, 0xb0, 0x03, 0xd8, 0x88,
	0xb9, 0xd4, 0x49, 0xad, 0xb0, 0xb3, 0x36, 0xee, 0xdc, 0x59, 0xeb, 0xe4, 0x94, 0x03, 0xec, 0x93,
	0xfc, 0x86, 0x37, 0x51, 0xae, 0xed, 0x8a, 0x69, 0x9b, 0xd1, 0xed, 0x10, 0xa1, 0x43, 0xe5, 0xee,
	0x8b, 0xa9, 0x66, 0x5d, 0x2e, 0xb2, 0x1e, 0x10, 0xeb, 0xb2, 0xc8, 0xfa, 0x02, 0x36, 0x2f, 0x02,
	0x3b, 0xbf, 0x59, 0x56, 0x91, 0x7d, 0xce, 0x95, 0x73, 0xde, 0xde, 0xa4, 0xfc, 0x71, 0xa1, 0xcf,
	0xaa, 0x68, 0x1a, 0x45, 0x87, 0xda, 0xc0, 0xbe, 0x87, 0xea, 0x19, 0x0f, 0xf4, 0x69, 0xc3, 0x73,
	0xdb, 0x0f, 0x6f, 0x1c, 0x0e, 0x16, 0x3a, 0x7f, 0x80, 0xc4, 0x23, 0xd7, 0xaa, 0x9c, 0x99, 0x27,
	0xf6, 0x47, 0xb0, 0xee, 0xf0, 0xd0, 0x9d, 0xe9, 0x96, 0xf4, 0x5c, 0x4d, 0x45, 0xfb, 0x11, 0xcd,
	0x1c, 0xc2, 0xa3, 0xa8, 0x87, 0xa0, 0x1e, 0xd7, 0x8b, 0xc0, 0x1e, 0xa7, 0xae, 0x3b, 0xcb, 0x7b,
	0xd7, 0x7e, 0x4c, 0xe3, 0x7a, 0x11, 0xec, 0x6a, 0x3c, 0xeb, 0x19, 0x1b, 0x02, 0x10, 0x31, 0xf1,
	0x7e, 0x11, 0xed, 0x36, 0xf6, 0xe9, 0xeb, 0xbb, 0x77, 0x52, 0x0e, 0xa3, 0xda, 0xd0, 0xfb, 0x45,
	0x58, 0xd5, 0x71, 0xf6, 0xa8, 0xb3, 0x05, 0x05, 0x31, 0x1a, 0xd4, 0xf6, 0x13, 0x6c, 0x9b, 0x02,
	0x1b, 0x4d, 0x3e, 0xfb, 0x1b, 0x68, 0xcd, 0x17, 0xe1, 0x58, 0xf2, 0xd0, 0x39, 0x6f, 0x6f, 0xe1,
	0x35, 0xe8, 0x7d, 0xf6, 0x71, 0x2f, 0x73, 0xdd, 0x45, 0x4f, 0x6b, 0x5d, 0x2c, 0x02, 0x9d, 0x31,
	0x54, 0xf3, 0x9e, 0xb1, 0x16, 0xd4, 0x77, 0x4f, 0xf7, 0xf7, 0x7f, 0xb6, 0xfb, 0xbd, 0xfd, 0xa3,
	0xd3, 0x7e, 0xeb, 0x03, 0xc6, 0xa0, 0x49, 0xc8, 0xf0, 0xf0, 0xe4, 0xf4, 0x78, 0xbf, 0x67, 0xb5,
	0x4a, 0xac, 0x01, 0x55, 0xc2, 0x76, 0x8f, 0x5e, 0xd3, 0x8f, 0x6f, 0xf4, 0x7a, 0x70, 0xfc, 0x33,
	0xfd, 0xf8, 0xd6, 0x04, 0x30, 0x84, 0x9d, 0xdd, 0x9f, 0x5b, 0x2b, 0x9d, 0x7f, 0x2f, 0xc1, 0x23,
	0xd3, 0x21, 0x53, 0x1e, 0xe7, 0x09, 0xe0, 0x73, 0x60, 0xa6, 0x0a, 0xa7, 0xc3, 0x38, 0x65, 0x92,
	0x92, 0xf9, 0x65, 0xd3, 0x58, 0x06, 0x59, 0xfe, 0xf9, 0x1e, 0x9e, 0x72, 0xdf, 0x8f, 0x2e, 0x85,
	0x4b, 0xc4, 0xc4, 0xe6, 0xe3, 0x68, 0x2a, 0x4c, 0x1a, 0x32, 0x25, 0x58, 0xdb, 0x50, 0xd0, 0x25,
	0xd9, 0xd1, 0x04, 0x4a, 0x43, 0xec, 0x39, 0x00, 0x2d, 0x0b, 0xbc, 0xc3, 0xa4, 0xab, 0x96, 0x2a,
	0x22, 0x78, 0x7b, 0xf9, 0x31, 0x34, 0x74, 0x49, 0xe0, 0xa6, 0x89, 0x22, 0x06, 0xdd, 0xb1, 0xd4,
	0x33, 0x50, 0x93, 0x3a, 0x7f, 0x5f, 0x82, 0xc6, 0x5f, 0xa6, 0x22, 0x51, 0xc5, 0x1c, 0x86, 0xff,
	0x49, 0xe0, 0xf6, 0x9f, 0x11, 0xd1, 0x87, 0x7e, 0x46, 0x7c, 0x9b, 0x3d, 0xb2, 0x11, 0xd4, 0xe8,
	0x4c, 0x8d, 0x90, 0xb9, 0xee, 0xbd, 0x2d, 0x81, 0xa0, 0xca, 0xf6, 0xbe, 0xf6, 0x59, 0xe8, 0x84,
	0x05, 0x6e, 0x8e, 0x75, 0xfe, 0x16, 0x1e, 0x6a, 0xf5, 0xde, 0xd9, 0x99, 0x70, 0x94, 0x57, 0xa8,
	0x78, 0x3f, 0x86, 0x46, 0x76, 0x7f, 0x4a, 0xf5, 0x5b, 0x89, 0x8a, 0x02, 0x73, 0x6d, 0x4a, 0xa5,
	0xdb, 0xf7, 0x50, 0x33, 0xa4, 0xc2, 0xe1, 0xfa, 0xf6, 0x4c, 0x08, 0xe4, 0xa0, 0x9f, 0x77, 0x2b,
	0x7f, 0xb5, 0x8a, 0xff, 0x59, 0x22, 0x19, 0x7c, 0x30, 0x28, 0x0d, 0x96, 0x06, 0xcb, 0x83, 0x95,
	0x41, 0x79, 0xb0, 0x3a, 0x26, 0xf4, 0xab, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x7f, 0x8e, 0xf0,
	0x05, 0x16, 0x22, 0x00, 0x00,
}
