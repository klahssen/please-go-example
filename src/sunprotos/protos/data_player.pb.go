// Code generated by protoc-gen-go.
// source: data_player.proto
// DO NOT EDIT!

package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Ignoring public import of ActivityType from enums.proto

// Ignoring public import of BadgeType from enums.proto

// Ignoring public import of CameraInterpolation from enums.proto

// Ignoring public import of CameraTarget from enums.proto

// Ignoring public import of Costume from enums.proto

// Ignoring public import of EncounterType from enums.proto

// Ignoring public import of Filter from enums.proto

// Ignoring public import of Form from enums.proto

// Ignoring public import of Gender from enums.proto

// Ignoring public import of HoloIapItemCategory from enums.proto

// Ignoring public import of ItemCategory from enums.proto

// Ignoring public import of ItemEffect from enums.proto

// Ignoring public import of NotificationState from enums.proto

// Ignoring public import of Platform from enums.proto

// Ignoring public import of PokemonFamilyId from enums.proto

// Ignoring public import of PokemonId from enums.proto

// Ignoring public import of PokemonMove from enums.proto

// Ignoring public import of PokemonMovementType from enums.proto

// Ignoring public import of PokemonRarity from enums.proto

// Ignoring public import of PokemonType from enums.proto

// Ignoring public import of QuestType from enums.proto

// Ignoring public import of Slot from enums.proto

// Ignoring public import of TeamColor from enums.proto

// Ignoring public import of TutorialState from enums.proto

type PlayerAvatarType int32

const (
	PlayerAvatarType_PLAYER_AVATAR_MALE   PlayerAvatarType = 0
	PlayerAvatarType_PLAYER_AVATAR_FEMALE PlayerAvatarType = 1
)

var PlayerAvatarType_name = map[int32]string{
	0: "PLAYER_AVATAR_MALE",
	1: "PLAYER_AVATAR_FEMALE",
}
var PlayerAvatarType_value = map[string]int32{
	"PLAYER_AVATAR_MALE":   0,
	"PLAYER_AVATAR_FEMALE": 1,
}

func (x PlayerAvatarType) String() string {
	return proto.EnumName(PlayerAvatarType_name, int32(x))
}
func (PlayerAvatarType) EnumDescriptor() ([]byte, []int) { return fileDescriptor7, []int{0} }

type ContactSettings struct {
	SendMarketingEmails   bool `protobuf:"varint,1,opt,name=send_marketing_emails,json=sendMarketingEmails" json:"send_marketing_emails,omitempty"`
	SendPushNotifications bool `protobuf:"varint,2,opt,name=send_push_notifications,json=sendPushNotifications" json:"send_push_notifications,omitempty"`
}

func (m *ContactSettings) Reset()                    { *m = ContactSettings{} }
func (m *ContactSettings) String() string            { return proto.CompactTextString(m) }
func (*ContactSettings) ProtoMessage()               {}
func (*ContactSettings) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{0} }

func (m *ContactSettings) GetSendMarketingEmails() bool {
	if m != nil {
		return m.SendMarketingEmails
	}
	return false
}

func (m *ContactSettings) GetSendPushNotifications() bool {
	if m != nil {
		return m.SendPushNotifications
	}
	return false
}

type Currency struct {
	Name   string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Amount int32  `protobuf:"varint,2,opt,name=amount" json:"amount,omitempty"`
}

func (m *Currency) Reset()                    { *m = Currency{} }
func (m *Currency) String() string            { return proto.CompactTextString(m) }
func (*Currency) ProtoMessage()               {}
func (*Currency) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{1} }

func (m *Currency) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Currency) GetAmount() int32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type DailyBonus struct {
	NextCollectedTimestampMs            int64 `protobuf:"varint,1,opt,name=next_collected_timestamp_ms,json=nextCollectedTimestampMs" json:"next_collected_timestamp_ms,omitempty"`
	NextDefenderBonusCollectTimestampMs int64 `protobuf:"varint,2,opt,name=next_defender_bonus_collect_timestamp_ms,json=nextDefenderBonusCollectTimestampMs" json:"next_defender_bonus_collect_timestamp_ms,omitempty"`
}

func (m *DailyBonus) Reset()                    { *m = DailyBonus{} }
func (m *DailyBonus) String() string            { return proto.CompactTextString(m) }
func (*DailyBonus) ProtoMessage()               {}
func (*DailyBonus) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{2} }

func (m *DailyBonus) GetNextCollectedTimestampMs() int64 {
	if m != nil {
		return m.NextCollectedTimestampMs
	}
	return 0
}

func (m *DailyBonus) GetNextDefenderBonusCollectTimestampMs() int64 {
	if m != nil {
		return m.NextDefenderBonusCollectTimestampMs
	}
	return 0
}

type EquippedBadge struct {
	BadgeType                         BadgeType `protobuf:"varint,1,opt,name=badge_type,json=badgeType,enum=SUNProtos.Enums.BadgeType" json:"badge_type,omitempty"`
	Level                             int32     `protobuf:"varint,2,opt,name=level" json:"level,omitempty"`
	NextEquipChangeAllowedTimestampMs int64     `protobuf:"varint,3,opt,name=next_equip_change_allowed_timestamp_ms,json=nextEquipChangeAllowedTimestampMs" json:"next_equip_change_allowed_timestamp_ms,omitempty"`
}

func (m *EquippedBadge) Reset()                    { *m = EquippedBadge{} }
func (m *EquippedBadge) String() string            { return proto.CompactTextString(m) }
func (*EquippedBadge) ProtoMessage()               {}
func (*EquippedBadge) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{3} }

func (m *EquippedBadge) GetBadgeType() BadgeType {
	if m != nil {
		return m.BadgeType
	}
	return BadgeType_BADGE_UNSET
}

func (m *EquippedBadge) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *EquippedBadge) GetNextEquipChangeAllowedTimestampMs() int64 {
	if m != nil {
		return m.NextEquipChangeAllowedTimestampMs
	}
	return 0
}

type PlayerAvatar struct {
	Skin           int32  `protobuf:"varint,2,opt,name=skin" json:"skin,omitempty"`
	Hair           int32  `protobuf:"varint,3,opt,name=hair" json:"hair,omitempty"`
	Shirt          int32  `protobuf:"varint,4,opt,name=shirt" json:"shirt,omitempty"`
	Pants          int32  `protobuf:"varint,5,opt,name=pants" json:"pants,omitempty"`
	Hat            int32  `protobuf:"varint,6,opt,name=hat" json:"hat,omitempty"`
	Shoes          int32  `protobuf:"varint,7,opt,name=shoes" json:"shoes,omitempty"`
	Avatar         int32  `protobuf:"varint,8,opt,name=avatar" json:"avatar,omitempty"`
	Eyes           int32  `protobuf:"varint,9,opt,name=eyes" json:"eyes,omitempty"`
	Backpack       int32  `protobuf:"varint,10,opt,name=backpack" json:"backpack,omitempty"`
	AvatarHair     string `protobuf:"bytes,11,opt,name=avatar_hair,json=avatarHair" json:"avatar_hair,omitempty"`
	AvatarShirt    string `protobuf:"bytes,12,opt,name=avatar_shirt,json=avatarShirt" json:"avatar_shirt,omitempty"`
	AvatarPants    string `protobuf:"bytes,13,opt,name=avatar_pants,json=avatarPants" json:"avatar_pants,omitempty"`
	AvatarHat      string `protobuf:"bytes,14,opt,name=avatar_hat,json=avatarHat" json:"avatar_hat,omitempty"`
	AvatarShoes    string `protobuf:"bytes,15,opt,name=avatar_shoes,json=avatarShoes" json:"avatar_shoes,omitempty"`
	AvatarEyes     string `protobuf:"bytes,16,opt,name=avatar_eyes,json=avatarEyes" json:"avatar_eyes,omitempty"`
	AvatarBackpack string `protobuf:"bytes,17,opt,name=avatar_backpack,json=avatarBackpack" json:"avatar_backpack,omitempty"`
	AvatarGloves   string `protobuf:"bytes,18,opt,name=avatar_gloves,json=avatarGloves" json:"avatar_gloves,omitempty"`
	AvatarSocks    string `protobuf:"bytes,19,opt,name=avatar_socks,json=avatarSocks" json:"avatar_socks,omitempty"`
	AvatarBelt     string `protobuf:"bytes,20,opt,name=avatar_belt,json=avatarBelt" json:"avatar_belt,omitempty"`
	AvatarGlasses  string `protobuf:"bytes,21,opt,name=avatar_glasses,json=avatarGlasses" json:"avatar_glasses,omitempty"`
	AvatarNecklace string `protobuf:"bytes,22,opt,name=avatar_necklace,json=avatarNecklace" json:"avatar_necklace,omitempty"`
}

func (m *PlayerAvatar) Reset()                    { *m = PlayerAvatar{} }
func (m *PlayerAvatar) String() string            { return proto.CompactTextString(m) }
func (*PlayerAvatar) ProtoMessage()               {}
func (*PlayerAvatar) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{4} }

func (m *PlayerAvatar) GetSkin() int32 {
	if m != nil {
		return m.Skin
	}
	return 0
}

func (m *PlayerAvatar) GetHair() int32 {
	if m != nil {
		return m.Hair
	}
	return 0
}

func (m *PlayerAvatar) GetShirt() int32 {
	if m != nil {
		return m.Shirt
	}
	return 0
}

func (m *PlayerAvatar) GetPants() int32 {
	if m != nil {
		return m.Pants
	}
	return 0
}

func (m *PlayerAvatar) GetHat() int32 {
	if m != nil {
		return m.Hat
	}
	return 0
}

func (m *PlayerAvatar) GetShoes() int32 {
	if m != nil {
		return m.Shoes
	}
	return 0
}

func (m *PlayerAvatar) GetAvatar() int32 {
	if m != nil {
		return m.Avatar
	}
	return 0
}

func (m *PlayerAvatar) GetEyes() int32 {
	if m != nil {
		return m.Eyes
	}
	return 0
}

func (m *PlayerAvatar) GetBackpack() int32 {
	if m != nil {
		return m.Backpack
	}
	return 0
}

func (m *PlayerAvatar) GetAvatarHair() string {
	if m != nil {
		return m.AvatarHair
	}
	return ""
}

func (m *PlayerAvatar) GetAvatarShirt() string {
	if m != nil {
		return m.AvatarShirt
	}
	return ""
}

func (m *PlayerAvatar) GetAvatarPants() string {
	if m != nil {
		return m.AvatarPants
	}
	return ""
}

func (m *PlayerAvatar) GetAvatarHat() string {
	if m != nil {
		return m.AvatarHat
	}
	return ""
}

func (m *PlayerAvatar) GetAvatarShoes() string {
	if m != nil {
		return m.AvatarShoes
	}
	return ""
}

func (m *PlayerAvatar) GetAvatarEyes() string {
	if m != nil {
		return m.AvatarEyes
	}
	return ""
}

func (m *PlayerAvatar) GetAvatarBackpack() string {
	if m != nil {
		return m.AvatarBackpack
	}
	return ""
}

func (m *PlayerAvatar) GetAvatarGloves() string {
	if m != nil {
		return m.AvatarGloves
	}
	return ""
}

func (m *PlayerAvatar) GetAvatarSocks() string {
	if m != nil {
		return m.AvatarSocks
	}
	return ""
}

func (m *PlayerAvatar) GetAvatarBelt() string {
	if m != nil {
		return m.AvatarBelt
	}
	return ""
}

func (m *PlayerAvatar) GetAvatarGlasses() string {
	if m != nil {
		return m.AvatarGlasses
	}
	return ""
}

func (m *PlayerAvatar) GetAvatarNecklace() string {
	if m != nil {
		return m.AvatarNecklace
	}
	return ""
}

type PlayerCamera struct {
	IsDefaultCamera bool `protobuf:"varint,1,opt,name=is_default_camera,json=isDefaultCamera" json:"is_default_camera,omitempty"`
}

func (m *PlayerCamera) Reset()                    { *m = PlayerCamera{} }
func (m *PlayerCamera) String() string            { return proto.CompactTextString(m) }
func (*PlayerCamera) ProtoMessage()               {}
func (*PlayerCamera) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{5} }

func (m *PlayerCamera) GetIsDefaultCamera() bool {
	if m != nil {
		return m.IsDefaultCamera
	}
	return false
}

type PlayerCurrency struct {
	Gems int32 `protobuf:"varint,1,opt,name=gems" json:"gems,omitempty"`
}

func (m *PlayerCurrency) Reset()                    { *m = PlayerCurrency{} }
func (m *PlayerCurrency) String() string            { return proto.CompactTextString(m) }
func (*PlayerCurrency) ProtoMessage()               {}
func (*PlayerCurrency) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{6} }

func (m *PlayerCurrency) GetGems() int32 {
	if m != nil {
		return m.Gems
	}
	return 0
}

type PlayerPublicProfile struct {
	Name   string        `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Level  int32         `protobuf:"varint,2,opt,name=level" json:"level,omitempty"`
	Avatar *PlayerAvatar `protobuf:"bytes,3,opt,name=avatar" json:"avatar,omitempty"`
}

func (m *PlayerPublicProfile) Reset()                    { *m = PlayerPublicProfile{} }
func (m *PlayerPublicProfile) String() string            { return proto.CompactTextString(m) }
func (*PlayerPublicProfile) ProtoMessage()               {}
func (*PlayerPublicProfile) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{7} }

func (m *PlayerPublicProfile) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PlayerPublicProfile) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *PlayerPublicProfile) GetAvatar() *PlayerAvatar {
	if m != nil {
		return m.Avatar
	}
	return nil
}

type PlayerStats struct {
	Level                int32   `protobuf:"varint,1,opt,name=level" json:"level,omitempty"`
	Experience           int64   `protobuf:"varint,2,opt,name=experience" json:"experience,omitempty"`
	PrevLevelXp          int64   `protobuf:"varint,3,opt,name=prev_level_xp,json=prevLevelXp" json:"prev_level_xp,omitempty"`
	NextLevelXp          int64   `protobuf:"varint,4,opt,name=next_level_xp,json=nextLevelXp" json:"next_level_xp,omitempty"`
	KmWalked             float32 `protobuf:"fixed32,5,opt,name=km_walked,json=kmWalked" json:"km_walked,omitempty"`
	PokemonsEncountered  int32   `protobuf:"varint,6,opt,name=pokemons_encountered,json=pokemonsEncountered" json:"pokemons_encountered,omitempty"`
	UniquePokedexEntries int32   `protobuf:"varint,7,opt,name=unique_pokedex_entries,json=uniquePokedexEntries" json:"unique_pokedex_entries,omitempty"`
	PokemonsCaptured     int32   `protobuf:"varint,8,opt,name=pokemons_captured,json=pokemonsCaptured" json:"pokemons_captured,omitempty"`
	Evolutions           int32   `protobuf:"varint,9,opt,name=evolutions" json:"evolutions,omitempty"`
	PokeStopVisits       int32   `protobuf:"varint,10,opt,name=poke_stop_visits,json=pokeStopVisits" json:"poke_stop_visits,omitempty"`
	PokeballsThrown      int32   `protobuf:"varint,11,opt,name=pokeballs_thrown,json=pokeballsThrown" json:"pokeballs_thrown,omitempty"`
	EggsHatched          int32   `protobuf:"varint,12,opt,name=eggs_hatched,json=eggsHatched" json:"eggs_hatched,omitempty"`
	BigMagikarpCaught    int32   `protobuf:"varint,13,opt,name=big_magikarp_caught,json=bigMagikarpCaught" json:"big_magikarp_caught,omitempty"`
	BattleAttackWon      int32   `protobuf:"varint,14,opt,name=battle_attack_won,json=battleAttackWon" json:"battle_attack_won,omitempty"`
	BattleAttackTotal    int32   `protobuf:"varint,15,opt,name=battle_attack_total,json=battleAttackTotal" json:"battle_attack_total,omitempty"`
	BattleDefendedWon    int32   `protobuf:"varint,16,opt,name=battle_defended_won,json=battleDefendedWon" json:"battle_defended_won,omitempty"`
	BattleTrainingWon    int32   `protobuf:"varint,17,opt,name=battle_training_won,json=battleTrainingWon" json:"battle_training_won,omitempty"`
	BattleTrainingTotal  int32   `protobuf:"varint,18,opt,name=battle_training_total,json=battleTrainingTotal" json:"battle_training_total,omitempty"`
	PrestigeRaisedTotal  int32   `protobuf:"varint,19,opt,name=prestige_raised_total,json=prestigeRaisedTotal" json:"prestige_raised_total,omitempty"`
	PrestigeDroppedTotal int32   `protobuf:"varint,20,opt,name=prestige_dropped_total,json=prestigeDroppedTotal" json:"prestige_dropped_total,omitempty"`
	PokemonDeployed      int32   `protobuf:"varint,21,opt,name=pokemon_deployed,json=pokemonDeployed" json:"pokemon_deployed,omitempty"`
	PokemonCaughtByType  []int32 `protobuf:"varint,22,rep,packed,name=pokemon_caught_by_type,json=pokemonCaughtByType" json:"pokemon_caught_by_type,omitempty"`
	SmallRattataCaught   int32   `protobuf:"varint,23,opt,name=small_rattata_caught,json=smallRattataCaught" json:"small_rattata_caught,omitempty"`
	UsedKmPool           float64 `protobuf:"fixed64,24,opt,name=used_km_pool,json=usedKmPool" json:"used_km_pool,omitempty"`
	LastKmRefillMs       int64   `protobuf:"varint,25,opt,name=last_km_refill_ms,json=lastKmRefillMs" json:"last_km_refill_ms,omitempty"`
}

func (m *PlayerStats) Reset()                    { *m = PlayerStats{} }
func (m *PlayerStats) String() string            { return proto.CompactTextString(m) }
func (*PlayerStats) ProtoMessage()               {}
func (*PlayerStats) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{8} }

func (m *PlayerStats) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *PlayerStats) GetExperience() int64 {
	if m != nil {
		return m.Experience
	}
	return 0
}

func (m *PlayerStats) GetPrevLevelXp() int64 {
	if m != nil {
		return m.PrevLevelXp
	}
	return 0
}

func (m *PlayerStats) GetNextLevelXp() int64 {
	if m != nil {
		return m.NextLevelXp
	}
	return 0
}

func (m *PlayerStats) GetKmWalked() float32 {
	if m != nil {
		return m.KmWalked
	}
	return 0
}

func (m *PlayerStats) GetPokemonsEncountered() int32 {
	if m != nil {
		return m.PokemonsEncountered
	}
	return 0
}

func (m *PlayerStats) GetUniquePokedexEntries() int32 {
	if m != nil {
		return m.UniquePokedexEntries
	}
	return 0
}

func (m *PlayerStats) GetPokemonsCaptured() int32 {
	if m != nil {
		return m.PokemonsCaptured
	}
	return 0
}

func (m *PlayerStats) GetEvolutions() int32 {
	if m != nil {
		return m.Evolutions
	}
	return 0
}

func (m *PlayerStats) GetPokeStopVisits() int32 {
	if m != nil {
		return m.PokeStopVisits
	}
	return 0
}

func (m *PlayerStats) GetPokeballsThrown() int32 {
	if m != nil {
		return m.PokeballsThrown
	}
	return 0
}

func (m *PlayerStats) GetEggsHatched() int32 {
	if m != nil {
		return m.EggsHatched
	}
	return 0
}

func (m *PlayerStats) GetBigMagikarpCaught() int32 {
	if m != nil {
		return m.BigMagikarpCaught
	}
	return 0
}

func (m *PlayerStats) GetBattleAttackWon() int32 {
	if m != nil {
		return m.BattleAttackWon
	}
	return 0
}

func (m *PlayerStats) GetBattleAttackTotal() int32 {
	if m != nil {
		return m.BattleAttackTotal
	}
	return 0
}

func (m *PlayerStats) GetBattleDefendedWon() int32 {
	if m != nil {
		return m.BattleDefendedWon
	}
	return 0
}

func (m *PlayerStats) GetBattleTrainingWon() int32 {
	if m != nil {
		return m.BattleTrainingWon
	}
	return 0
}

func (m *PlayerStats) GetBattleTrainingTotal() int32 {
	if m != nil {
		return m.BattleTrainingTotal
	}
	return 0
}

func (m *PlayerStats) GetPrestigeRaisedTotal() int32 {
	if m != nil {
		return m.PrestigeRaisedTotal
	}
	return 0
}

func (m *PlayerStats) GetPrestigeDroppedTotal() int32 {
	if m != nil {
		return m.PrestigeDroppedTotal
	}
	return 0
}

func (m *PlayerStats) GetPokemonDeployed() int32 {
	if m != nil {
		return m.PokemonDeployed
	}
	return 0
}

func (m *PlayerStats) GetPokemonCaughtByType() []int32 {
	if m != nil {
		return m.PokemonCaughtByType
	}
	return nil
}

func (m *PlayerStats) GetSmallRattataCaught() int32 {
	if m != nil {
		return m.SmallRattataCaught
	}
	return 0
}

func (m *PlayerStats) GetUsedKmPool() float64 {
	if m != nil {
		return m.UsedKmPool
	}
	return 0
}

func (m *PlayerStats) GetLastKmRefillMs() int64 {
	if m != nil {
		return m.LastKmRefillMs
	}
	return 0
}

func init() {
	proto.RegisterType((*ContactSettings)(nil), "SUNProtos.Data.Player.ContactSettings")
	proto.RegisterType((*Currency)(nil), "SUNProtos.Data.Player.Currency")
	proto.RegisterType((*DailyBonus)(nil), "SUNProtos.Data.Player.DailyBonus")
	proto.RegisterType((*EquippedBadge)(nil), "SUNProtos.Data.Player.EquippedBadge")
	proto.RegisterType((*PlayerAvatar)(nil), "SUNProtos.Data.Player.PlayerAvatar")
	proto.RegisterType((*PlayerCamera)(nil), "SUNProtos.Data.Player.PlayerCamera")
	proto.RegisterType((*PlayerCurrency)(nil), "SUNProtos.Data.Player.PlayerCurrency")
	proto.RegisterType((*PlayerPublicProfile)(nil), "SUNProtos.Data.Player.PlayerPublicProfile")
	proto.RegisterType((*PlayerStats)(nil), "SUNProtos.Data.Player.PlayerStats")
	proto.RegisterEnum("SUNProtos.Data.Player.PlayerAvatarType", PlayerAvatarType_name, PlayerAvatarType_value)
}

func init() { proto.RegisterFile("data_player.proto", fileDescriptor7) }

var fileDescriptor7 = []byte{
	// 1255 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x56, 0xed, 0x6e, 0xdb, 0x36,
	0x14, 0xad, 0x9b, 0xb8, 0x73, 0xe8, 0xc4, 0x89, 0x19, 0xc7, 0xd5, 0x5a, 0x6c, 0x4b, 0xdd, 0x7d,
	0x64, 0x1d, 0x60, 0x6c, 0x69, 0x51, 0x60, 0x1b, 0xf6, 0xc3, 0xb1, 0xbd, 0x15, 0x68, 0x53, 0x78,
	0x4a, 0xda, 0x6e, 0xfb, 0x43, 0xd0, 0xd2, 0x8d, 0x2d, 0x98, 0x22, 0x55, 0x91, 0x4a, 0x62, 0x60,
	0x7b, 0x99, 0xbd, 0xc2, 0x1e, 0x60, 0x6f, 0x36, 0x0c, 0xbc, 0xa4, 0x1c, 0xb9, 0xc8, 0x3f, 0xea,
	0x9c, 0x73, 0xef, 0x3d, 0x34, 0x79, 0x2f, 0x4d, 0xda, 0x31, 0x37, 0x9c, 0x65, 0x82, 0x2f, 0x21,
	0xef, 0x67, 0xb9, 0x32, 0x8a, 0x1e, 0x9c, 0xbd, 0x79, 0x3d, 0xb1, 0x2b, 0xdd, 0x1f, 0x71, 0xc3,
	0xfb, 0x13, 0x24, 0x1f, 0x34, 0x41, 0x16, 0xa9, 0x76, 0x9a, 0xde, 0x5f, 0x64, 0x77, 0xa8, 0xa4,
	0xe1, 0x91, 0x39, 0x03, 0x63, 0x12, 0x39, 0xd3, 0xf4, 0x98, 0x1c, 0x68, 0x90, 0x31, 0x4b, 0x79,
	0xbe, 0x00, 0x0b, 0x31, 0x48, 0x79, 0x22, 0x74, 0x50, 0x3b, 0xac, 0x1d, 0x35, 0xc2, 0x7d, 0x4b,
	0x9e, 0x96, 0xdc, 0x18, 0x29, 0xfa, 0x9c, 0xdc, 0xc7, 0x98, 0xac, 0xd0, 0x73, 0x26, 0x95, 0x49,
	0x2e, 0x92, 0x88, 0x9b, 0x44, 0x49, 0x1d, 0xdc, 0xc5, 0x28, 0x4c, 0x39, 0x29, 0xf4, 0xfc, 0x75,
	0x95, 0xec, 0x3d, 0x27, 0x8d, 0x61, 0x91, 0xe7, 0x20, 0xa3, 0x25, 0xa5, 0x64, 0x53, 0xf2, 0x14,
	0xb0, 0xcc, 0x56, 0x88, 0x6b, 0xda, 0x25, 0xf7, 0x78, 0xaa, 0x0a, 0x69, 0x30, 0x4d, 0x3d, 0xf4,
	0x5f, 0xbd, 0xbf, 0x6b, 0x84, 0x8c, 0x78, 0x22, 0x96, 0x27, 0x4a, 0x16, 0x9a, 0xfe, 0x44, 0x1e,
	0x4a, 0xb8, 0x36, 0x2c, 0x52, 0x42, 0x40, 0x64, 0x20, 0x66, 0x26, 0x49, 0x41, 0x1b, 0x9e, 0x66,
	0x2c, 0x75, 0xc6, 0x37, 0xc2, 0xc0, 0x4a, 0x86, 0xa5, 0xe2, 0xbc, 0x14, 0x9c, 0x6a, 0xfa, 0x86,
	0x1c, 0x61, 0x78, 0x0c, 0x17, 0x20, 0x63, 0xc8, 0xd9, 0xd4, 0x66, 0x2d, 0xb3, 0xad, 0xe7, 0xba,
	0x8b, 0xb9, 0x1e, 0x5b, 0xfd, 0xc8, 0xcb, 0xd1, 0x83, 0x4f, 0x5c, 0x49, 0xdb, 0xfb, 0xa7, 0x46,
	0x76, 0xc6, 0xef, 0x8b, 0x24, 0xcb, 0x20, 0x3e, 0xe1, 0xf1, 0x0c, 0xe8, 0xf7, 0x84, 0x4c, 0xed,
	0x82, 0x99, 0x65, 0xe6, 0x36, 0xda, 0x3a, 0x7e, 0xd0, 0xbf, 0x39, 0xa6, 0x31, 0x9e, 0x0c, 0x6a,
	0xcf, 0x97, 0x19, 0x84, 0x5b, 0xd3, 0x72, 0x49, 0x3b, 0xa4, 0x2e, 0xe0, 0x12, 0x84, 0xff, 0x21,
	0xdc, 0x07, 0xfd, 0x95, 0x7c, 0x89, 0xce, 0xc1, 0x96, 0x61, 0xd1, 0x9c, 0xcb, 0x19, 0x30, 0x2e,
	0x84, 0xba, 0xfa, 0xf0, 0x37, 0xd8, 0x40, 0xdf, 0x8f, 0xac, 0x1a, 0x3d, 0x0d, 0x51, 0x3b, 0x70,
	0xd2, 0xaa, 0xeb, 0xff, 0x36, 0xc9, 0xb6, 0xbb, 0x29, 0x83, 0x4b, 0x6e, 0x78, 0x6e, 0xcf, 0x45,
	0x2f, 0x12, 0xe9, 0x0b, 0xe3, 0xda, 0x62, 0x73, 0x9e, 0xe4, 0x98, 0xb5, 0x1e, 0xe2, 0xda, 0x3a,
	0xd4, 0xf3, 0x24, 0x37, 0xc1, 0xa6, 0x73, 0x88, 0x1f, 0x16, 0xcd, 0xb8, 0x34, 0x3a, 0xa8, 0x3b,
	0x14, 0x3f, 0xe8, 0x1e, 0xd9, 0x98, 0x73, 0x13, 0xdc, 0x43, 0xcc, 0x2e, 0x5d, 0xb4, 0x02, 0x1d,
	0x7c, 0x54, 0x46, 0x2b, 0xd0, 0x78, 0xfe, 0xe8, 0x22, 0x68, 0xf8, 0xf3, 0x5f, 0x79, 0x82, 0x25,
	0xe8, 0x60, 0xcb, 0xd5, 0xb7, 0x6b, 0xfa, 0x80, 0x34, 0xa6, 0x3c, 0x5a, 0x64, 0x3c, 0x5a, 0x04,
	0x04, 0xf1, 0xd5, 0x37, 0xfd, 0x8c, 0x34, 0x5d, 0x24, 0x43, 0xdb, 0x4d, 0xbc, 0x62, 0xc4, 0x41,
	0x2f, 0xac, 0xf9, 0x47, 0x64, 0xdb, 0x0b, 0xdc, 0x1e, 0xb6, 0x51, 0xe1, 0x83, 0xce, 0x70, 0x27,
	0x37, 0x12, 0xb7, 0xa1, 0x9d, 0xaa, 0x64, 0x82, 0xdb, 0xfa, 0x84, 0x90, 0x55, 0x19, 0x13, 0xb4,
	0x50, 0xb0, 0x55, 0x56, 0x31, 0x6b, 0x45, 0xec, 0x56, 0x77, 0xd7, 0x8b, 0xd8, 0x0d, 0xdf, 0x18,
	0xc5, 0xfd, 0xed, 0x55, 0x8d, 0x8e, 0xed, 0x2e, 0xbf, 0x22, 0xbb, 0x5e, 0xb0, 0xda, 0x6c, 0x1b,
	0x45, 0x2d, 0x07, 0x9f, 0x94, 0x5b, 0x7e, 0x4c, 0x76, 0xbc, 0x70, 0x26, 0xd4, 0x25, 0xe8, 0x80,
	0xa2, 0xcc, 0x3b, 0xf8, 0x05, 0xb1, 0xaa, 0x23, 0x15, 0x2d, 0x74, 0xb0, 0xbf, 0xe6, 0xc8, 0x42,
	0x15, 0x47, 0x53, 0x10, 0x26, 0xe8, 0x54, 0x1d, 0x9d, 0x80, 0x30, 0xf4, 0x0b, 0xd2, 0x5a, 0x15,
	0xe2, 0x5a, 0x83, 0x0e, 0x0e, 0x50, 0xb3, 0x53, 0x56, 0x42, 0xb0, 0x62, 0x5c, 0x42, 0xb4, 0x10,
	0x3c, 0x82, 0xa0, 0x5b, 0x35, 0xfe, 0xda, 0xa3, 0xbd, 0x1f, 0xca, 0xfb, 0x37, 0xe4, 0x29, 0xe4,
	0x9c, 0x3e, 0x21, 0xed, 0x44, 0xdb, 0xde, 0xe4, 0x85, 0x30, 0x2c, 0x42, 0xd0, 0xcf, 0xa2, 0xdd,
	0x44, 0x8f, 0x1c, 0xee, 0xb4, 0xbd, 0xcf, 0x49, 0xcb, 0xc7, 0x56, 0xa6, 0xca, 0x0c, 0xfc, 0x0c,
	0xa8, 0x87, 0xb8, 0xee, 0xfd, 0x49, 0xf6, 0x9d, 0x6a, 0x52, 0x4c, 0x45, 0x12, 0x4d, 0x72, 0x75,
	0x91, 0x08, 0xb8, 0x75, 0x00, 0xdd, 0xde, 0x76, 0x3f, 0xae, 0xae, 0xa5, 0x6d, 0x80, 0xe6, 0xf1,
	0xe3, 0xfe, 0xad, 0xa3, 0xb6, 0x5f, 0xed, 0xa3, 0xf2, 0xee, 0xf6, 0xfe, 0x6d, 0x90, 0xa6, 0x23,
	0xce, 0x0c, 0x37, 0xfa, 0xa6, 0x44, 0xad, 0x5a, 0xe2, 0x53, 0x42, 0xe0, 0x3a, 0x83, 0x3c, 0x01,
	0x19, 0x81, 0x9f, 0x3a, 0x15, 0x84, 0xf6, 0xc8, 0x4e, 0x96, 0xc3, 0x25, 0x43, 0x35, 0xbb, 0xce,
	0x7c, 0x83, 0x37, 0x2d, 0xf8, 0xca, 0x62, 0xbf, 0x65, 0x56, 0x83, 0xd3, 0x61, 0xa5, 0xd9, 0x74,
	0x1a, 0x0b, 0x96, 0x9a, 0x87, 0x64, 0x6b, 0x91, 0xb2, 0x2b, 0x2e, 0x16, 0x10, 0x63, 0x8f, 0xde,
	0x0d, 0x1b, 0x8b, 0xf4, 0x1d, 0x7e, 0xd3, 0xef, 0x48, 0x27, 0x53, 0x0b, 0x48, 0x95, 0xd4, 0x0c,
	0x64, 0x64, 0x47, 0x2f, 0xe4, 0x10, 0xfb, 0xbe, 0xdd, 0x2f, 0xb9, 0xf1, 0x0d, 0x45, 0x9f, 0x91,
	0x6e, 0x21, 0x93, 0xf7, 0x05, 0x30, 0xcb, 0xc6, 0x70, 0xcd, 0x40, 0x9a, 0x3c, 0x59, 0x35, 0x76,
	0xc7, 0xb1, 0x13, 0x47, 0x8e, 0x1d, 0x47, 0xbf, 0x21, 0xed, 0x55, 0xa1, 0x88, 0x67, 0xa6, 0xb0,
	0x55, 0x5c, 0xcb, 0xef, 0x95, 0xc4, 0xd0, 0xe3, 0xf8, 0xd3, 0x5c, 0x2a, 0x51, 0xb8, 0xf7, 0xc5,
	0x8d, 0x80, 0x0a, 0x42, 0x8f, 0x08, 0xc6, 0x30, 0x6d, 0x54, 0xc6, 0x2e, 0x13, 0x9d, 0x18, 0xed,
	0x07, 0x42, 0xcb, 0xe2, 0x67, 0x46, 0x65, 0x6f, 0x11, 0xa5, 0x5f, 0x3b, 0xe5, 0x94, 0x0b, 0xa1,
	0x99, 0x99, 0xe7, 0xea, 0x4a, 0xe2, 0x6c, 0xa8, 0x87, 0xbb, 0x2b, 0xfc, 0x1c, 0x61, 0xdb, 0x29,
	0x30, 0x9b, 0x69, 0xdb, 0xd8, 0xd1, 0x1c, 0x62, 0x1c, 0x10, 0xf5, 0xb0, 0x69, 0xb1, 0x17, 0x0e,
	0xa2, 0x7d, 0xb2, 0x3f, 0x4d, 0x66, 0x2c, 0xe5, 0xb3, 0x64, 0xc1, 0xf3, 0x8c, 0x45, 0xbc, 0x98,
	0xcd, 0x0d, 0xce, 0x89, 0x7a, 0xd8, 0x9e, 0x26, 0xb3, 0x53, 0xcf, 0x0c, 0x91, 0xb0, 0x17, 0x7b,
	0xca, 0x8d, 0x11, 0xc0, 0xb8, 0x31, 0x3c, 0x5a, 0xb0, 0x2b, 0x25, 0x71, 0x68, 0xd4, 0xc3, 0x5d,
	0x47, 0x0c, 0x10, 0x7f, 0xa7, 0x24, 0xe6, 0x5e, 0xd3, 0x1a, 0x65, 0xb8, 0xc0, 0x09, 0x62, 0x73,
	0x57, 0xd4, 0xe7, 0x96, 0xa8, 0xe8, 0xfd, 0xa3, 0x16, 0x63, 0xf6, 0xbd, 0xaa, 0xde, 0xbf, 0x5f,
	0xf1, 0x7a, 0x7e, 0x93, 0xf3, 0x44, 0xda, 0x57, 0xdf, 0xea, 0xdb, 0x55, 0xfd, 0xb9, 0x67, 0xac,
	0xfe, 0x98, 0x1c, 0x7c, 0xa8, 0x77, 0x8e, 0xa8, 0xbb, 0x1a, 0xeb, 0x11, 0xce, 0xd3, 0x31, 0x39,
	0xc8, 0x72, 0xd0, 0x26, 0x99, 0x01, 0xcb, 0x79, 0xa2, 0xed, 0x13, 0x85, 0x31, 0xfb, 0xfe, 0x3a,
	0x79, 0x32, 0x44, 0xce, 0xc5, 0x3c, 0x23, 0xdd, 0x55, 0x4c, 0x9c, 0x2b, 0xfb, 0x94, 0xfa, 0xa0,
	0x8e, 0xbb, 0x4e, 0x25, 0x3b, 0x72, 0xa4, 0x8b, 0xf2, 0xe7, 0x9a, 0x2a, 0xc9, 0x62, 0xc8, 0x84,
	0x5a, 0x42, 0x8c, 0x43, 0xc9, 0x9f, 0x6b, 0xaa, 0xe4, 0xc8, 0xc3, 0xf4, 0x29, 0xe9, 0x96, 0x52,
	0x77, 0x5e, 0x6c, 0xba, 0x74, 0xcf, 0x73, 0xf7, 0x70, 0xa3, 0x72, 0xc9, 0xdd, 0x99, 0x9d, 0x2c,
	0xf1, 0x31, 0xfe, 0x96, 0x74, 0x74, 0xca, 0x85, 0x60, 0xb9, 0x3d, 0x0d, 0xc3, 0xcb, 0xa3, 0xbe,
	0x8f, 0x35, 0x28, 0x72, 0xa1, 0xa3, 0xfc, 0x59, 0x1f, 0x92, 0xed, 0xc2, 0x6e, 0x78, 0x91, 0xb2,
	0x4c, 0x29, 0x11, 0x04, 0x87, 0xb5, 0xa3, 0x5a, 0x48, 0x2c, 0xf6, 0x32, 0x9d, 0x28, 0x65, 0x3d,
	0xb7, 0x05, 0xd7, 0xc6, 0x2a, 0x72, 0xb8, 0x48, 0x84, 0xb0, 0xaf, 0xf6, 0xc7, 0xd8, 0xb0, 0x2d,
	0x4b, 0xbc, 0x4c, 0x43, 0x84, 0x4f, 0xf5, 0x93, 0x11, 0xd9, 0xab, 0x4e, 0x16, 0xb4, 0xd4, 0x25,
	0x74, 0xf2, 0x6a, 0xf0, 0xfb, 0x38, 0x64, 0x83, 0xb7, 0x83, 0xf3, 0x41, 0xc8, 0x4e, 0x07, 0xaf,
	0xc6, 0x7b, 0x77, 0x68, 0x40, 0x3a, 0xeb, 0xf8, 0xcf, 0x63, 0x64, 0x6a, 0x27, 0x8d, 0x3f, 0xee,
	0xe1, 0x7f, 0x40, 0x3d, 0xb9, 0x33, 0x75, 0xab, 0xa7, 0xff, 0x07, 0x00, 0x00, 0xff, 0xff, 0xd5,
	0x58, 0x92, 0x7f, 0x46, 0x0a, 0x00, 0x00,
}
