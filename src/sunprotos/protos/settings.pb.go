// Code generated by protoc-gen-go.
// source: settings.proto
// DO NOT EDIT!

package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type FestivalSettings_FestivalType int32

const (
	FestivalSettings_NONE      FestivalSettings_FestivalType = 0
	FestivalSettings_HALLOWEEN FestivalSettings_FestivalType = 1
	FestivalSettings_HOLIDAY   FestivalSettings_FestivalType = 2
)

var FestivalSettings_FestivalType_name = map[int32]string{
	0: "NONE",
	1: "HALLOWEEN",
	2: "HOLIDAY",
}
var FestivalSettings_FestivalType_value = map[string]int32{
	"NONE":      0,
	"HALLOWEEN": 1,
	"HOLIDAY":   2,
}

func (x FestivalSettings_FestivalType) String() string {
	return proto.EnumName(FestivalSettings_FestivalType_name, int32(x))
}
func (FestivalSettings_FestivalType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor24, []int{2, 0}
}

type DownloadSettingsAction struct {
	Hash string `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
}

func (m *DownloadSettingsAction) Reset()                    { *m = DownloadSettingsAction{} }
func (m *DownloadSettingsAction) String() string            { return proto.CompactTextString(m) }
func (*DownloadSettingsAction) ProtoMessage()               {}
func (*DownloadSettingsAction) Descriptor() ([]byte, []int) { return fileDescriptor24, []int{0} }

func (m *DownloadSettingsAction) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

type EventSettings struct {
	CondolenceRibbonCountry []string `protobuf:"bytes,1,rep,name=condolence_ribbon_country,json=condolenceRibbonCountry" json:"condolence_ribbon_country,omitempty"`
}

func (m *EventSettings) Reset()                    { *m = EventSettings{} }
func (m *EventSettings) String() string            { return proto.CompactTextString(m) }
func (*EventSettings) ProtoMessage()               {}
func (*EventSettings) Descriptor() ([]byte, []int) { return fileDescriptor24, []int{1} }

func (m *EventSettings) GetCondolenceRibbonCountry() []string {
	if m != nil {
		return m.CondolenceRibbonCountry
	}
	return nil
}

type FestivalSettings struct {
	FestivalType FestivalSettings_FestivalType `protobuf:"varint,1,opt,name=festival_type,json=festivalType,enum=SUNProtos.Settings.FestivalSettings_FestivalType" json:"festival_type,omitempty"`
	Key          string                        `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	Vector       string                        `protobuf:"bytes,3,opt,name=vector" json:"vector,omitempty"`
}

func (m *FestivalSettings) Reset()                    { *m = FestivalSettings{} }
func (m *FestivalSettings) String() string            { return proto.CompactTextString(m) }
func (*FestivalSettings) ProtoMessage()               {}
func (*FestivalSettings) Descriptor() ([]byte, []int) { return fileDescriptor24, []int{2} }

func (m *FestivalSettings) GetFestivalType() FestivalSettings_FestivalType {
	if m != nil {
		return m.FestivalType
	}
	return FestivalSettings_NONE
}

func (m *FestivalSettings) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *FestivalSettings) GetVector() string {
	if m != nil {
		return m.Vector
	}
	return ""
}

type FortSettings struct {
	InteractionRangeMeters    float64 `protobuf:"fixed64,1,opt,name=interaction_range_meters,json=interactionRangeMeters" json:"interaction_range_meters,omitempty"`
	MaxTotalDeployedPokemon   int32   `protobuf:"varint,2,opt,name=max_total_deployed_pokemon,json=maxTotalDeployedPokemon" json:"max_total_deployed_pokemon,omitempty"`
	MaxPlayerDeployedPokemon  int32   `protobuf:"varint,3,opt,name=max_player_deployed_pokemon,json=maxPlayerDeployedPokemon" json:"max_player_deployed_pokemon,omitempty"`
	DeployStaminaMultiplier   float64 `protobuf:"fixed64,4,opt,name=deploy_stamina_multiplier,json=deployStaminaMultiplier" json:"deploy_stamina_multiplier,omitempty"`
	DeployAttackMultiplier    float64 `protobuf:"fixed64,5,opt,name=deploy_attack_multiplier,json=deployAttackMultiplier" json:"deploy_attack_multiplier,omitempty"`
	FarInteractionRangeMeters float64 `protobuf:"fixed64,6,opt,name=far_interaction_range_meters,json=farInteractionRangeMeters" json:"far_interaction_range_meters,omitempty"`
	DisableGyms               bool    `protobuf:"varint,7,opt,name=disable_gyms,json=disableGyms" json:"disable_gyms,omitempty"`
}

func (m *FortSettings) Reset()                    { *m = FortSettings{} }
func (m *FortSettings) String() string            { return proto.CompactTextString(m) }
func (*FortSettings) ProtoMessage()               {}
func (*FortSettings) Descriptor() ([]byte, []int) { return fileDescriptor24, []int{3} }

func (m *FortSettings) GetInteractionRangeMeters() float64 {
	if m != nil {
		return m.InteractionRangeMeters
	}
	return 0
}

func (m *FortSettings) GetMaxTotalDeployedPokemon() int32 {
	if m != nil {
		return m.MaxTotalDeployedPokemon
	}
	return 0
}

func (m *FortSettings) GetMaxPlayerDeployedPokemon() int32 {
	if m != nil {
		return m.MaxPlayerDeployedPokemon
	}
	return 0
}

func (m *FortSettings) GetDeployStaminaMultiplier() float64 {
	if m != nil {
		return m.DeployStaminaMultiplier
	}
	return 0
}

func (m *FortSettings) GetDeployAttackMultiplier() float64 {
	if m != nil {
		return m.DeployAttackMultiplier
	}
	return 0
}

func (m *FortSettings) GetFarInteractionRangeMeters() float64 {
	if m != nil {
		return m.FarInteractionRangeMeters
	}
	return 0
}

func (m *FortSettings) GetDisableGyms() bool {
	if m != nil {
		return m.DisableGyms
	}
	return false
}

type GlobalSettings struct {
	FortSettings         *FortSettings        `protobuf:"bytes,2,opt,name=fort_settings,json=fortSettings" json:"fort_settings,omitempty"`
	MapSettings          *MapSettings         `protobuf:"bytes,3,opt,name=map_settings,json=mapSettings" json:"map_settings,omitempty"`
	LevelSettings        *LevelSettings       `protobuf:"bytes,4,opt,name=level_settings,json=levelSettings" json:"level_settings,omitempty"`
	InventorySettings    *InventorySettings   `protobuf:"bytes,5,opt,name=inventory_settings,json=inventorySettings" json:"inventory_settings,omitempty"`
	MinimumClientVersion string               `protobuf:"bytes,6,opt,name=minimum_client_version,json=minimumClientVersion" json:"minimum_client_version,omitempty"`
	GpsSettings          *GpsSettings         `protobuf:"bytes,7,opt,name=gps_settings,json=gpsSettings" json:"gps_settings,omitempty"`
	FestivalSettings     *FestivalSettings    `protobuf:"bytes,8,opt,name=festival_settings,json=festivalSettings" json:"festival_settings,omitempty"`
	EventSettings        *EventSettings       `protobuf:"bytes,9,opt,name=event_settings,json=eventSettings" json:"event_settings,omitempty"`
	MaxPokemonTypes      int32                `protobuf:"varint,10,opt,name=max_pokemon_types,json=maxPokemonTypes" json:"max_pokemon_types,omitempty"`
	SfidaSettings        *SfidaSettings       `protobuf:"bytes,11,opt,name=sfida_settings,json=sfidaSettings" json:"sfida_settings,omitempty"`
	NewsSettings         *NewsSettings        `protobuf:"bytes,12,opt,name=news_settings,json=newsSettings" json:"news_settings,omitempty"`
	TranslationSettings  *TranslationSettings `protobuf:"bytes,13,opt,name=translation_settings,json=translationSettings" json:"translation_settings,omitempty"`
	PasscodeSettings     *PasscodeSettings    `protobuf:"bytes,14,opt,name=passcode_settings,json=passcodeSettings" json:"passcode_settings,omitempty"`
}

func (m *GlobalSettings) Reset()                    { *m = GlobalSettings{} }
func (m *GlobalSettings) String() string            { return proto.CompactTextString(m) }
func (*GlobalSettings) ProtoMessage()               {}
func (*GlobalSettings) Descriptor() ([]byte, []int) { return fileDescriptor24, []int{4} }

func (m *GlobalSettings) GetFortSettings() *FortSettings {
	if m != nil {
		return m.FortSettings
	}
	return nil
}

func (m *GlobalSettings) GetMapSettings() *MapSettings {
	if m != nil {
		return m.MapSettings
	}
	return nil
}

func (m *GlobalSettings) GetLevelSettings() *LevelSettings {
	if m != nil {
		return m.LevelSettings
	}
	return nil
}

func (m *GlobalSettings) GetInventorySettings() *InventorySettings {
	if m != nil {
		return m.InventorySettings
	}
	return nil
}

func (m *GlobalSettings) GetMinimumClientVersion() string {
	if m != nil {
		return m.MinimumClientVersion
	}
	return ""
}

func (m *GlobalSettings) GetGpsSettings() *GpsSettings {
	if m != nil {
		return m.GpsSettings
	}
	return nil
}

func (m *GlobalSettings) GetFestivalSettings() *FestivalSettings {
	if m != nil {
		return m.FestivalSettings
	}
	return nil
}

func (m *GlobalSettings) GetEventSettings() *EventSettings {
	if m != nil {
		return m.EventSettings
	}
	return nil
}

func (m *GlobalSettings) GetMaxPokemonTypes() int32 {
	if m != nil {
		return m.MaxPokemonTypes
	}
	return 0
}

func (m *GlobalSettings) GetSfidaSettings() *SfidaSettings {
	if m != nil {
		return m.SfidaSettings
	}
	return nil
}

func (m *GlobalSettings) GetNewsSettings() *NewsSettings {
	if m != nil {
		return m.NewsSettings
	}
	return nil
}

func (m *GlobalSettings) GetTranslationSettings() *TranslationSettings {
	if m != nil {
		return m.TranslationSettings
	}
	return nil
}

func (m *GlobalSettings) GetPasscodeSettings() *PasscodeSettings {
	if m != nil {
		return m.PasscodeSettings
	}
	return nil
}

type GpsSettings struct {
	DrivingWarningSpeedMetersPerSecond float32 `protobuf:"fixed32,1,opt,name=driving_warning_speed_meters_per_second,json=drivingWarningSpeedMetersPerSecond" json:"driving_warning_speed_meters_per_second,omitempty"`
	DrivingWarningCooldownMinutes      float32 `protobuf:"fixed32,2,opt,name=driving_warning_cooldown_minutes,json=drivingWarningCooldownMinutes" json:"driving_warning_cooldown_minutes,omitempty"`
	DrivingSpeedSampleIntervalSeconds  float32 `protobuf:"fixed32,3,opt,name=driving_speed_sample_interval_seconds,json=drivingSpeedSampleIntervalSeconds" json:"driving_speed_sample_interval_seconds,omitempty"`
	DrivingSpeedSampleCount            int32   `protobuf:"varint,4,opt,name=driving_speed_sample_count,json=drivingSpeedSampleCount" json:"driving_speed_sample_count,omitempty"`
}

func (m *GpsSettings) Reset()                    { *m = GpsSettings{} }
func (m *GpsSettings) String() string            { return proto.CompactTextString(m) }
func (*GpsSettings) ProtoMessage()               {}
func (*GpsSettings) Descriptor() ([]byte, []int) { return fileDescriptor24, []int{5} }

func (m *GpsSettings) GetDrivingWarningSpeedMetersPerSecond() float32 {
	if m != nil {
		return m.DrivingWarningSpeedMetersPerSecond
	}
	return 0
}

func (m *GpsSettings) GetDrivingWarningCooldownMinutes() float32 {
	if m != nil {
		return m.DrivingWarningCooldownMinutes
	}
	return 0
}

func (m *GpsSettings) GetDrivingSpeedSampleIntervalSeconds() float32 {
	if m != nil {
		return m.DrivingSpeedSampleIntervalSeconds
	}
	return 0
}

func (m *GpsSettings) GetDrivingSpeedSampleCount() int32 {
	if m != nil {
		return m.DrivingSpeedSampleCount
	}
	return 0
}

type InventorySettings struct {
	MaxPokemon   int32 `protobuf:"varint,1,opt,name=max_pokemon,json=maxPokemon" json:"max_pokemon,omitempty"`
	MaxBagItems  int32 `protobuf:"varint,2,opt,name=max_bag_items,json=maxBagItems" json:"max_bag_items,omitempty"`
	BasePokemon  int32 `protobuf:"varint,3,opt,name=base_pokemon,json=basePokemon" json:"base_pokemon,omitempty"`
	BaseBagItems int32 `protobuf:"varint,4,opt,name=base_bag_items,json=baseBagItems" json:"base_bag_items,omitempty"`
	BaseEggs     int32 `protobuf:"varint,5,opt,name=base_eggs,json=baseEggs" json:"base_eggs,omitempty"`
}

func (m *InventorySettings) Reset()                    { *m = InventorySettings{} }
func (m *InventorySettings) String() string            { return proto.CompactTextString(m) }
func (*InventorySettings) ProtoMessage()               {}
func (*InventorySettings) Descriptor() ([]byte, []int) { return fileDescriptor24, []int{6} }

func (m *InventorySettings) GetMaxPokemon() int32 {
	if m != nil {
		return m.MaxPokemon
	}
	return 0
}

func (m *InventorySettings) GetMaxBagItems() int32 {
	if m != nil {
		return m.MaxBagItems
	}
	return 0
}

func (m *InventorySettings) GetBasePokemon() int32 {
	if m != nil {
		return m.BasePokemon
	}
	return 0
}

func (m *InventorySettings) GetBaseBagItems() int32 {
	if m != nil {
		return m.BaseBagItems
	}
	return 0
}

func (m *InventorySettings) GetBaseEggs() int32 {
	if m != nil {
		return m.BaseEggs
	}
	return 0
}

type LevelSettings struct {
	TrainerCpModifier         float64 `protobuf:"fixed64,2,opt,name=trainer_cp_modifier,json=trainerCpModifier" json:"trainer_cp_modifier,omitempty"`
	TrainerDifficultyModifier float64 `protobuf:"fixed64,3,opt,name=trainer_difficulty_modifier,json=trainerDifficultyModifier" json:"trainer_difficulty_modifier,omitempty"`
}

func (m *LevelSettings) Reset()                    { *m = LevelSettings{} }
func (m *LevelSettings) String() string            { return proto.CompactTextString(m) }
func (*LevelSettings) ProtoMessage()               {}
func (*LevelSettings) Descriptor() ([]byte, []int) { return fileDescriptor24, []int{7} }

func (m *LevelSettings) GetTrainerCpModifier() float64 {
	if m != nil {
		return m.TrainerCpModifier
	}
	return 0
}

func (m *LevelSettings) GetTrainerDifficultyModifier() float64 {
	if m != nil {
		return m.TrainerDifficultyModifier
	}
	return 0
}

type MapSettings struct {
	PokemonVisibleRange            float64 `protobuf:"fixed64,1,opt,name=pokemon_visible_range,json=pokemonVisibleRange" json:"pokemon_visible_range,omitempty"`
	PokeNavRangeMeters             float64 `protobuf:"fixed64,2,opt,name=poke_nav_range_meters,json=pokeNavRangeMeters" json:"poke_nav_range_meters,omitempty"`
	EncounterRangeMeters           float64 `protobuf:"fixed64,3,opt,name=encounter_range_meters,json=encounterRangeMeters" json:"encounter_range_meters,omitempty"`
	GetMapObjectsMinRefreshSeconds float32 `protobuf:"fixed32,4,opt,name=get_map_objects_min_refresh_seconds,json=getMapObjectsMinRefreshSeconds" json:"get_map_objects_min_refresh_seconds,omitempty"`
	GetMapObjectsMaxRefreshSeconds float32 `protobuf:"fixed32,5,opt,name=get_map_objects_max_refresh_seconds,json=getMapObjectsMaxRefreshSeconds" json:"get_map_objects_max_refresh_seconds,omitempty"`
	GetMapObjectsMinDistanceMeters float32 `protobuf:"fixed32,6,opt,name=get_map_objects_min_distance_meters,json=getMapObjectsMinDistanceMeters" json:"get_map_objects_min_distance_meters,omitempty"`
	GoogleMapsApiKey               string  `protobuf:"bytes,7,opt,name=google_maps_api_key,json=googleMapsApiKey" json:"google_maps_api_key,omitempty"`
	MinNearbyHideSightings         int32   `protobuf:"varint,8,opt,name=min_nearby_hide_sightings,json=minNearbyHideSightings" json:"min_nearby_hide_sightings,omitempty"`
}

func (m *MapSettings) Reset()                    { *m = MapSettings{} }
func (m *MapSettings) String() string            { return proto.CompactTextString(m) }
func (*MapSettings) ProtoMessage()               {}
func (*MapSettings) Descriptor() ([]byte, []int) { return fileDescriptor24, []int{8} }

func (m *MapSettings) GetPokemonVisibleRange() float64 {
	if m != nil {
		return m.PokemonVisibleRange
	}
	return 0
}

func (m *MapSettings) GetPokeNavRangeMeters() float64 {
	if m != nil {
		return m.PokeNavRangeMeters
	}
	return 0
}

func (m *MapSettings) GetEncounterRangeMeters() float64 {
	if m != nil {
		return m.EncounterRangeMeters
	}
	return 0
}

func (m *MapSettings) GetGetMapObjectsMinRefreshSeconds() float32 {
	if m != nil {
		return m.GetMapObjectsMinRefreshSeconds
	}
	return 0
}

func (m *MapSettings) GetGetMapObjectsMaxRefreshSeconds() float32 {
	if m != nil {
		return m.GetMapObjectsMaxRefreshSeconds
	}
	return 0
}

func (m *MapSettings) GetGetMapObjectsMinDistanceMeters() float32 {
	if m != nil {
		return m.GetMapObjectsMinDistanceMeters
	}
	return 0
}

func (m *MapSettings) GetGoogleMapsApiKey() string {
	if m != nil {
		return m.GoogleMapsApiKey
	}
	return ""
}

func (m *MapSettings) GetMinNearbyHideSightings() int32 {
	if m != nil {
		return m.MinNearbyHideSightings
	}
	return 0
}

type NewsSettings struct {
	News []*NewsSettings_News `protobuf:"bytes,1,rep,name=news" json:"news,omitempty"`
}

func (m *NewsSettings) Reset()                    { *m = NewsSettings{} }
func (m *NewsSettings) String() string            { return proto.CompactTextString(m) }
func (*NewsSettings) ProtoMessage()               {}
func (*NewsSettings) Descriptor() ([]byte, []int) { return fileDescriptor24, []int{9} }

func (m *NewsSettings) GetNews() []*NewsSettings_News {
	if m != nil {
		return m.News
	}
	return nil
}

type NewsSettings_News struct {
	NewsBundleId       string   `protobuf:"bytes,1,opt,name=news_bundle_id,json=newsBundleId" json:"news_bundle_id,omitempty"`
	ExclusiveCountries []string `protobuf:"bytes,2,rep,name=exclusive_countries,json=exclusiveCountries" json:"exclusive_countries,omitempty"`
}

func (m *NewsSettings_News) Reset()                    { *m = NewsSettings_News{} }
func (m *NewsSettings_News) String() string            { return proto.CompactTextString(m) }
func (*NewsSettings_News) ProtoMessage()               {}
func (*NewsSettings_News) Descriptor() ([]byte, []int) { return fileDescriptor24, []int{9, 0} }

func (m *NewsSettings_News) GetNewsBundleId() string {
	if m != nil {
		return m.NewsBundleId
	}
	return ""
}

func (m *NewsSettings_News) GetExclusiveCountries() []string {
	if m != nil {
		return m.ExclusiveCountries
	}
	return nil
}

type PasscodeSettings struct {
	ShowPasscodeInStore bool `protobuf:"varint,1,opt,name=show_passcode_in_store,json=showPasscodeInStore" json:"show_passcode_in_store,omitempty"`
}

func (m *PasscodeSettings) Reset()                    { *m = PasscodeSettings{} }
func (m *PasscodeSettings) String() string            { return proto.CompactTextString(m) }
func (*PasscodeSettings) ProtoMessage()               {}
func (*PasscodeSettings) Descriptor() ([]byte, []int) { return fileDescriptor24, []int{10} }

func (m *PasscodeSettings) GetShowPasscodeInStore() bool {
	if m != nil {
		return m.ShowPasscodeInStore
	}
	return false
}

type SfidaSettings struct {
	LowBatteryThreshold float32 `protobuf:"fixed32,1,opt,name=low_battery_threshold,json=lowBatteryThreshold" json:"low_battery_threshold,omitempty"`
}

func (m *SfidaSettings) Reset()                    { *m = SfidaSettings{} }
func (m *SfidaSettings) String() string            { return proto.CompactTextString(m) }
func (*SfidaSettings) ProtoMessage()               {}
func (*SfidaSettings) Descriptor() ([]byte, []int) { return fileDescriptor24, []int{11} }

func (m *SfidaSettings) GetLowBatteryThreshold() float32 {
	if m != nil {
		return m.LowBatteryThreshold
	}
	return 0
}

type TranslationSettings struct {
	TranslationBundleIds []string `protobuf:"bytes,1,rep,name=translation_bundle_ids,json=translationBundleIds" json:"translation_bundle_ids,omitempty"`
}

func (m *TranslationSettings) Reset()                    { *m = TranslationSettings{} }
func (m *TranslationSettings) String() string            { return proto.CompactTextString(m) }
func (*TranslationSettings) ProtoMessage()               {}
func (*TranslationSettings) Descriptor() ([]byte, []int) { return fileDescriptor24, []int{12} }

func (m *TranslationSettings) GetTranslationBundleIds() []string {
	if m != nil {
		return m.TranslationBundleIds
	}
	return nil
}

func init() {
	proto.RegisterType((*DownloadSettingsAction)(nil), "SUNProtos.Settings.DownloadSettingsAction")
	proto.RegisterType((*EventSettings)(nil), "SUNProtos.Settings.EventSettings")
	proto.RegisterType((*FestivalSettings)(nil), "SUNProtos.Settings.FestivalSettings")
	proto.RegisterType((*FortSettings)(nil), "SUNProtos.Settings.FortSettings")
	proto.RegisterType((*GlobalSettings)(nil), "SUNProtos.Settings.GlobalSettings")
	proto.RegisterType((*GpsSettings)(nil), "SUNProtos.Settings.GpsSettings")
	proto.RegisterType((*InventorySettings)(nil), "SUNProtos.Settings.InventorySettings")
	proto.RegisterType((*LevelSettings)(nil), "SUNProtos.Settings.LevelSettings")
	proto.RegisterType((*MapSettings)(nil), "SUNProtos.Settings.MapSettings")
	proto.RegisterType((*NewsSettings)(nil), "SUNProtos.Settings.NewsSettings")
	proto.RegisterType((*NewsSettings_News)(nil), "SUNProtos.Settings.NewsSettings.News")
	proto.RegisterType((*PasscodeSettings)(nil), "SUNProtos.Settings.PasscodeSettings")
	proto.RegisterType((*SfidaSettings)(nil), "SUNProtos.Settings.SfidaSettings")
	proto.RegisterType((*TranslationSettings)(nil), "SUNProtos.Settings.TranslationSettings")
	proto.RegisterEnum("SUNProtos.Settings.FestivalSettings_FestivalType", FestivalSettings_FestivalType_name, FestivalSettings_FestivalType_value)
}

func init() { proto.RegisterFile("settings.proto", fileDescriptor24) }

var fileDescriptor24 = []byte{
	// 1393 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x57, 0xdb, 0x6e, 0x1b, 0xb7,
	0x16, 0x3d, 0xb2, 0xac, 0xd8, 0xde, 0x92, 0x7c, 0x64, 0x3a, 0xc7, 0x96, 0x93, 0xd3, 0xc6, 0x99,
	0x26, 0x48, 0x50, 0xb4, 0x2e, 0x72, 0x79, 0x68, 0x52, 0xb4, 0x85, 0x6f, 0xb1, 0x0d, 0x5b, 0xb6,
	0x3b, 0x72, 0x13, 0x34, 0x40, 0x41, 0x50, 0x1a, 0x6a, 0xcc, 0x66, 0x86, 0x1c, 0x90, 0xb4, 0x64,
	0x3d, 0xf5, 0x4f, 0xfa, 0xdc, 0x6f, 0xe8, 0x43, 0x3e, 0xa0, 0xbf, 0xd4, 0x97, 0x82, 0xe4, 0xdc,
	0x2c, 0x4b, 0x40, 0x9e, 0x2c, 0x72, 0xad, 0xbd, 0x48, 0x6e, 0x6e, 0xae, 0x3d, 0x86, 0x65, 0x45,
	0xb5, 0x66, 0x3c, 0x54, 0x5b, 0x89, 0x14, 0x5a, 0x20, 0xd4, 0xfd, 0xf9, 0xf4, 0xdc, 0xfc, 0x52,
	0x5b, 0xdd, 0x14, 0xf1, 0xbe, 0x82, 0xb5, 0x3d, 0x31, 0xe2, 0x91, 0x20, 0x41, 0x36, 0xb7, 0xdd,
	0xd7, 0x4c, 0x70, 0x84, 0x60, 0xfe, 0x92, 0xa8, 0xcb, 0x76, 0x65, 0xb3, 0xf2, 0x74, 0xc9, 0xb7,
	0xbf, 0xbd, 0x63, 0x68, 0xee, 0x0f, 0x29, 0xd7, 0x19, 0x15, 0xbd, 0x86, 0x8d, 0xbe, 0xe0, 0x81,
	0x88, 0x28, 0xef, 0x53, 0x2c, 0x59, 0xaf, 0x27, 0x38, 0xee, 0x8b, 0x2b, 0xae, 0xe5, 0xb8, 0x5d,
	0xd9, 0xac, 0x3e, 0x5d, 0xf2, 0xd7, 0x0b, 0x82, 0x6f, 0xf1, 0x5d, 0x07, 0x7b, 0x7f, 0x57, 0xa0,
	0xf5, 0x86, 0x2a, 0xcd, 0x86, 0x24, 0xca, 0x05, 0xdf, 0x42, 0x73, 0x90, 0xce, 0x61, 0x3d, 0x4e,
	0xa8, 0x5d, 0x7e, 0xf9, 0xf9, 0xb3, 0xad, 0xdb, 0x7b, 0xdf, 0x9a, 0x0c, 0xce, 0x27, 0x2e, 0xc6,
	0x09, 0xf5, 0x1b, 0x83, 0xd2, 0x08, 0xb5, 0xa0, 0xfa, 0x81, 0x8e, 0xdb, 0x73, 0xf6, 0x30, 0xe6,
	0x27, 0x5a, 0x83, 0x3b, 0x43, 0xda, 0xd7, 0x42, 0xb6, 0xab, 0x76, 0x32, 0x1d, 0x79, 0x2f, 0xa1,
	0x51, 0xd6, 0x41, 0x8b, 0x30, 0x7f, 0x7a, 0x76, 0xba, 0xdf, 0xfa, 0x0f, 0x6a, 0xc2, 0xd2, 0xe1,
	0xf6, 0xc9, 0xc9, 0xd9, 0xbb, 0xfd, 0xfd, 0xd3, 0x56, 0x05, 0xd5, 0x61, 0xe1, 0xf0, 0xec, 0xe4,
	0x68, 0x6f, 0xfb, 0x97, 0xd6, 0x9c, 0xf7, 0x47, 0x15, 0x1a, 0x6f, 0x84, 0x2c, 0x32, 0xf3, 0x2d,
	0xb4, 0x19, 0xd7, 0x54, 0x12, 0x9b, 0x4d, 0x2c, 0x09, 0x0f, 0x29, 0x8e, 0xa9, 0xa6, 0x52, 0xd9,
	0x33, 0x55, 0xfc, 0xb5, 0x12, 0xee, 0x1b, 0xb8, 0x63, 0x51, 0xf4, 0x1d, 0xdc, 0x8b, 0xc9, 0x35,
	0xd6, 0x42, 0x93, 0x08, 0x07, 0x34, 0x89, 0xc4, 0x98, 0x06, 0x38, 0x11, 0x1f, 0x68, 0x2c, 0xb8,
	0x3d, 0x41, 0xcd, 0x5f, 0x8f, 0xc9, 0xf5, 0x85, 0x21, 0xec, 0xa5, 0xf8, 0xb9, 0x83, 0xd1, 0xf7,
	0x70, 0xdf, 0x04, 0x27, 0x11, 0x19, 0x53, 0x79, 0x3b, 0xba, 0x6a, 0xa3, 0xdb, 0x31, 0xb9, 0x3e,
	0xb7, 0x8c, 0xc9, 0xf0, 0xd7, 0xb0, 0xe1, 0x62, 0xb0, 0xd2, 0x24, 0x66, 0x9c, 0xe0, 0xf8, 0x2a,
	0xd2, 0x2c, 0x89, 0x18, 0x95, 0xed, 0x79, 0xbb, 0xed, 0x75, 0x47, 0xe8, 0x3a, 0xbc, 0x93, 0xc3,
	0xe6, 0xc4, 0x69, 0x2c, 0xd1, 0x9a, 0xf4, 0x3f, 0x94, 0x43, 0x6b, 0xee, 0xc4, 0x0e, 0xdf, 0xb6,
	0x70, 0x29, 0xf2, 0x47, 0xf8, 0xff, 0x80, 0x48, 0x3c, 0x33, 0x5f, 0x77, 0x6c, 0xf4, 0xc6, 0x80,
	0xc8, 0xa3, 0xe9, 0x29, 0x7b, 0x08, 0x8d, 0x80, 0x29, 0xd2, 0x8b, 0x28, 0x0e, 0xc7, 0xb1, 0x6a,
	0x2f, 0x6c, 0x56, 0x9e, 0x2e, 0xfa, 0xf5, 0x74, 0xee, 0x60, 0x1c, 0x2b, 0xef, 0xe3, 0x02, 0x2c,
	0x1f, 0x44, 0xa2, 0x57, 0xaa, 0xb5, 0x7d, 0x68, 0x0e, 0x84, 0xd4, 0x38, 0x7b, 0x26, 0x36, 0xb7,
	0xf5, 0xe7, 0x9b, 0x53, 0x6b, 0xad, 0x74, 0xb7, 0x7e, 0x63, 0x50, 0xbe, 0xe9, 0x1d, 0x68, 0xc4,
	0x24, 0x29, 0x54, 0xaa, 0x56, 0xe5, 0xc1, 0x34, 0x95, 0x0e, 0x49, 0x72, 0x91, 0x7a, 0x5c, 0x0c,
	0xd0, 0x21, 0x2c, 0x47, 0x74, 0x48, 0xa3, 0x42, 0x65, 0xde, 0xaa, 0x3c, 0x9c, 0xa6, 0x72, 0x62,
	0x98, 0xb9, 0x4e, 0x33, 0x2a, 0x0f, 0xd1, 0x05, 0x20, 0xc6, 0xcd, 0x1b, 0x15, 0x72, 0x5c, 0xa8,
	0xd5, 0xac, 0xda, 0xe3, 0x69, 0x6a, 0x47, 0x19, 0x3b, 0x57, 0x5c, 0x61, 0x93, 0x53, 0xe8, 0x25,
	0xac, 0xc5, 0x8c, 0xb3, 0xf8, 0x2a, 0xc6, 0xfd, 0x88, 0x51, 0xae, 0xf1, 0x90, 0x4a, 0xc5, 0x04,
	0xb7, 0x77, 0xb3, 0xe4, 0xdf, 0x4d, 0xd1, 0x5d, 0x0b, 0xbe, 0x75, 0x98, 0xc9, 0x4c, 0x98, 0xa8,
	0x62, 0x17, 0x0b, 0xb3, 0x33, 0x73, 0x90, 0xa8, 0x22, 0x33, 0x61, 0x31, 0x40, 0x3f, 0xc1, 0x4a,
	0x6e, 0x08, 0xb9, 0xd0, 0xa2, 0x15, 0x7a, 0xf4, 0x29, 0xa6, 0xe0, 0xb7, 0x06, 0x93, 0x1e, 0x73,
	0x08, 0xcb, 0xd4, 0x1c, 0xb0, 0xd0, 0x5b, 0x9a, 0x9d, 0xec, 0x1b, 0x7e, 0xe7, 0x37, 0xe9, 0x0d,
	0xfb, 0xfb, 0x12, 0x56, 0xec, 0x6b, 0x73, 0xaf, 0xc7, 0x1a, 0x96, 0x6a, 0x83, 0x7d, 0x63, 0xff,
	0x35, 0x6f, 0xcc, 0xcd, 0x1b, 0x1b, 0xb1, 0xab, 0xaa, 0x01, 0x0b, 0x48, 0xb1, 0x6a, 0x7d, 0xf6,
	0xaa, 0x5d, 0xc3, 0x2c, 0x56, 0x55, 0xe5, 0xa1, 0xa9, 0x5b, 0x4e, 0x47, 0xa5, 0xbc, 0x36, 0x66,
	0xd7, 0xed, 0x29, 0x1d, 0x15, 0x89, 0x6d, 0xf0, 0xd2, 0x08, 0xbd, 0x87, 0xbb, 0x5a, 0x12, 0xae,
	0x22, 0x62, 0x5f, 0x5c, 0xae, 0xd6, 0xb4, 0x6a, 0x4f, 0xa6, 0xa9, 0x5d, 0x14, 0xfc, 0x5c, 0x74,
	0x55, 0xdf, 0x9e, 0x34, 0xb7, 0x96, 0x10, 0xa5, 0xfa, 0x22, 0xa0, 0x85, 0xf0, 0xf2, 0xec, 0x5b,
	0x3b, 0x4f, 0xc9, 0xc5, 0xad, 0x25, 0x13, 0x33, 0xde, 0x5f, 0x73, 0x50, 0x2f, 0x55, 0x09, 0xea,
	0xc2, 0x93, 0x40, 0xb2, 0x21, 0xe3, 0x21, 0x1e, 0x11, 0xc9, 0xcd, 0x5f, 0x95, 0x50, 0x1a, 0xa4,
	0xa6, 0x81, 0x13, 0x2a, 0xb1, 0xa2, 0xa6, 0xf9, 0x58, 0xbf, 0x9d, 0xf3, 0xbd, 0x94, 0xfe, 0xce,
	0xb1, 0xbb, 0x86, 0xec, 0xfc, 0xe3, 0x9c, 0xca, 0xae, 0x65, 0xa2, 0x03, 0xd8, 0x9c, 0x14, 0xed,
	0x0b, 0x11, 0x05, 0x62, 0xc4, 0x71, 0xcc, 0xf8, 0x95, 0xa6, 0xce, 0x25, 0xe6, 0xfc, 0xcf, 0x6e,
	0xaa, 0xed, 0xa6, 0xac, 0x8e, 0x23, 0xa1, 0x73, 0x78, 0x9c, 0x09, 0xb9, 0x5d, 0x29, 0x12, 0x27,
	0x11, 0x75, 0x1e, 0xe7, 0x6a, 0xd9, 0x2c, 0xe8, 0xdc, 0x62, 0xce, 0x7f, 0x98, 0x92, 0xed, 0xa6,
	0xba, 0x96, 0x7a, 0x94, 0x32, 0xdd, 0xce, 0x6c, 0x5b, 0x98, 0xaa, 0x68, 0xbb, 0xad, 0xb5, 0x8b,
	0x9a, 0xbf, 0x7e, 0x5b, 0xc6, 0x76, 0x5b, 0xef, 0x63, 0x05, 0x56, 0x6e, 0x3d, 0x74, 0xf4, 0x00,
	0xea, 0xa5, 0xf2, 0xb5, 0x69, 0xaa, 0xf9, 0x50, 0x14, 0x2e, 0xf2, 0xa0, 0x69, 0x08, 0x3d, 0x12,
	0x62, 0xa6, 0x69, 0xac, 0xd2, 0xee, 0x63, 0xa2, 0x76, 0x48, 0x78, 0x64, 0xa6, 0x8c, 0xf7, 0xf6,
	0x88, 0xa2, 0x13, 0x2d, 0xa6, 0x6e, 0xe6, 0x32, 0x99, 0x47, 0xb0, 0x6c, 0x29, 0x85, 0x8e, 0xdb,
	0xae, 0x0d, 0xcc, 0x85, 0xee, 0xc3, 0x92, 0x65, 0xd1, 0x30, 0x35, 0xac, 0x9a, 0xbf, 0x68, 0x26,
	0xf6, 0xc3, 0x50, 0x79, 0xbf, 0x43, 0xf3, 0x86, 0xed, 0xa1, 0x2d, 0x30, 0x85, 0xc7, 0x38, 0x95,
	0xb8, 0x9f, 0xe0, 0x58, 0x04, 0x6c, 0x60, 0x1a, 0xcd, 0x9c, 0x6d, 0x15, 0x2b, 0x29, 0xb4, 0x9b,
	0x74, 0x52, 0x00, 0xfd, 0x00, 0xf7, 0x33, 0x7e, 0xc0, 0x06, 0x03, 0xd6, 0xbf, 0x8a, 0xf4, 0xb8,
	0x88, 0xab, 0xba, 0x16, 0x93, 0x52, 0xf6, 0x72, 0x46, 0x16, 0xef, 0xfd, 0x53, 0x85, 0x7a, 0xc9,
	0xbe, 0xd1, 0x73, 0xf8, 0x5f, 0xf6, 0xec, 0x87, 0x4c, 0x31, 0xd3, 0x7a, 0x6c, 0xcf, 0x4a, 0x9b,
	0xfb, 0x6a, 0x0a, 0xbe, 0x75, 0x98, 0x6d, 0x56, 0xe8, 0x99, 0x8b, 0xc1, 0x9c, 0x0c, 0x6f, 0x36,
	0x38, 0xb7, 0x6b, 0x64, 0xc0, 0x53, 0x32, 0x2c, 0x77, 0xb6, 0x97, 0xb0, 0x46, 0xb9, 0xbd, 0x62,
	0x2a, 0x6f, 0xc6, 0xb8, 0x1d, 0xdf, 0xcd, 0xd1, 0x72, 0xd4, 0x31, 0x7c, 0x11, 0x52, 0x8d, 0x4d,
	0x5b, 0x12, 0xbd, 0xdf, 0x68, 0x5f, 0x2b, 0x53, 0xbd, 0x58, 0xd2, 0x81, 0xa4, 0xea, 0x32, 0xaf,
	0xbd, 0x79, 0x5b, 0x7b, 0x9f, 0x87, 0x54, 0x77, 0x48, 0x72, 0xe6, 0x88, 0x1d, 0xc6, 0x7d, 0x47,
	0xcb, 0x0a, 0x6f, 0x9a, 0x18, 0xb9, 0xbe, 0x25, 0x56, 0x9b, 0x26, 0x46, 0xae, 0x3f, 0x41, 0x8c,
	0x71, 0x1c, 0x30, 0xa5, 0x89, 0xf9, 0x84, 0x2c, 0x75, 0xfc, 0x29, 0x3b, 0xdb, 0x4b, 0x69, 0xe9,
	0x31, 0xbf, 0x86, 0xd5, 0x50, 0x88, 0x30, 0xa2, 0x46, 0x4f, 0x61, 0x92, 0x30, 0x6c, 0x3e, 0xf2,
	0x16, 0x6c, 0x4b, 0x6a, 0x39, 0xa8, 0x43, 0x12, 0xb5, 0x9d, 0xb0, 0x63, 0x3a, 0x46, 0xaf, 0x60,
	0xc3, 0xac, 0xc5, 0x29, 0x91, 0xbd, 0x31, 0xbe, 0x64, 0xc6, 0x9b, 0x58, 0x78, 0x59, 0xb4, 0x94,
	0x9a, 0x6f, 0xba, 0xdc, 0xa9, 0xc5, 0x0f, 0x59, 0x40, 0xbb, 0x19, 0xea, 0xfd, 0x59, 0x81, 0x46,
	0xd9, 0x4a, 0xd1, 0x2b, 0x98, 0x37, 0x66, 0x6a, 0xbf, 0x71, 0x67, 0x34, 0xd6, 0x32, 0xdf, 0x0e,
	0x7c, 0x1b, 0x72, 0xef, 0x57, 0x98, 0x37, 0x23, 0xf3, 0x2a, 0xac, 0x8d, 0xf7, 0xae, 0x78, 0x60,
	0x9c, 0x21, 0x48, 0x3f, 0xb5, 0xad, 0x4b, 0xef, 0xd8, 0xc9, 0xa3, 0x00, 0x7d, 0x03, 0xab, 0xf4,
	0xba, 0x1f, 0x5d, 0x29, 0x36, 0x4c, 0xdf, 0xba, 0x64, 0xd6, 0x84, 0xcc, 0xb7, 0x35, 0xca, 0xa1,
	0xdd, 0x0c, 0xf1, 0x0e, 0xa0, 0x35, 0xe9, 0xa6, 0xe8, 0x05, 0xac, 0xa9, 0x4b, 0x31, 0xc2, 0xb9,
	0x27, 0x33, 0x8e, 0x95, 0x16, 0xd2, 0x55, 0xeb, 0xa2, 0xbf, 0x6a, 0xd0, 0x2c, 0xea, 0x88, 0x77,
	0x0d, 0xe4, 0xed, 0x42, 0xf3, 0x46, 0x1b, 0x32, 0x25, 0x1f, 0x89, 0x11, 0xee, 0x11, 0xad, 0xa9,
	0x1c, 0x63, 0x7d, 0x69, 0x2e, 0x56, 0x44, 0x99, 0xbf, 0xae, 0x46, 0x62, 0xb4, 0xe3, 0xb0, 0x8b,
	0x0c, 0xf2, 0x8e, 0x61, 0x75, 0x4a, 0xd3, 0x30, 0x65, 0x5d, 0xee, 0x3d, 0x79, 0x0a, 0x54, 0xfa,
	0x4f, 0x43, 0xb9, 0x33, 0x65, 0xa9, 0x50, 0x3b, 0x8b, 0xef, 0xef, 0xd8, 0xff, 0x64, 0x54, 0xcf,
	0xfd, 0x7d, 0xf1, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa0, 0x64, 0xef, 0x16, 0xe3, 0x0c, 0x00,
	0x00,
}
